.MODEL SMALL
.STACK 64
.DATA
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	cat_W                     equ 25
	cat_H                     equ 25
	heart_W                   equ 15
	heart_H                   equ 15
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCORE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   cat_score                 DB 30h, 30h,  30h ;10**2*element[0]+10**1*element[1]+1*element[2]
	
    dog_score                 DB 30h, 30h, 30h
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PowerUps;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PowerUpsYpos              DW  100, 64                                                                                                                                                                                         	;100 for step 1, 2 ; 64 for step 3
	steps_to_draw_powerUps    DW  3, 1, 2, 3                                                                                                                                                                                      	;if 0 then nothing will be drawn
	steps_to_draw_powerUps2   DW  2, 2, 3, 1                                                                                                                                                                                      	;if 0 then nothing will be drawn
	RandomXpos_Step1          DW  50, 90, 50, 90
	RandomXpos2_Step1         DW  120, 70, 120, 70
	RandomXpos_Step2          DW  200, 240, 240, 200
	RandomXpos2_Step2         DW  260, 260, 220, 220
	RandomXpos_Step3          DW  120, 160, 160, 120
	RandomXpos2_Step3         DW  190, 190, 140, 140
	heart_powerupX            DW  ?
	heart_powerupY            DW  ?
	heart_powerupX2           DW  ?
	heart_powerupY2           DW  ?
	draw_PowerUp              DB  1
	draw_PowerUp2             DB  1
	RandomNums                DW  0, 0
	Cat_Took_PowerUp		  DB 0
	Cat_Took_HeartUp		  DB 0
	Cat_Took_HeartDown		  DB 0
	Cat_Took_Dub_Power		  DB 0
	Cat_Took_Coin			  DB 0
	Cat_Took_Shield			  DB 0
    Dog_Took_PowerUp		  DB 0
	Dog_Took_HeartUp		  DB 0
	Dog_Took_HeartDown		  DB 0
	Dog_Took_Dub_Power		  DB 0
	Dog_Took_Coin			  DB 0
	Dog_Took_Shield			  DB 0
	;############################################ADDDDEEEDDDD##########################################;
	ChesonPowerUp             DW  ?
	ChesonPowerUp2            DW  ?
	CurrentPowerUp            DW  ?
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;End Power Ups;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	xCoord                    dw  ?                                                                                                                                                                                               	;  cat x coordinate
	yCoord                    dw  ?                                                                                                                                                                                               	;  cat y coordinate
	xright_cat                dw  ?                                                                                                                                                                                               	; cat x coordinate (left)
	ybelow_cat                dw  ?                                                                                                                                                                                               	; cat y coordinate (below)
	cat_img                   DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 22, 22, 22, 22, 20, 19, 22, 19
	                          DB  22, 20, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 20, 24, 24, 24, 28, 29, 29, 29, 24, 23, 27, 21, 29, 22, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 25, 26, 24
	                          DB  20, 20, 28, 29, 29, 28, 24, 24, 28, 21, 29, 24, 18, 16, 16, 16, 16, 16, 16, 16, 16, 22, 28, 25, 20, 16, 17, 28, 29, 29, 27, 23, 28, 28, 21, 29, 28, 224, 16, 16
	                          DB  16, 16, 16, 16, 16, 19, 26, 28, 20, 16, 16, 18, 28, 29, 29, 26, 22, 29, 28, 22, 29, 29, 19, 16, 16, 16, 16, 16, 16, 16, 19, 27, 23, 18, 16, 16, 18, 28, 29, 29
	                          DB  27, 23, 28, 28, 26, 29, 29, 20, 17, 16, 16, 16, 16, 16, 16, 19, 25, 19, 16, 16, 16, 18, 28, 29, 29, 29, 27, 79, 54, 54, 54, 79, 26, 17, 16, 9, 9, 9, 9, 16
	                          DB  18, 23, 21, 18, 16, 16, 17, 24, 29, 29, 78, 54, 53, 52, 52, 52, 53, 54, 126, 55, 54, 54, 54, 9, 16, 17, 19, 19, 17, 16, 16, 16, 19, 29, 80, 53, 53, 53, 53, 52
	                          DB  52, 52, 53, 54, 54, 53, 52, 53, 9, 16, 16, 16, 16, 16, 16, 16, 16, 18, 151, 54, 53, 53, 53, 53, 52, 52, 52, 52, 53, 53, 53, 53, 54, 9, 16, 16, 16, 16, 16, 16
	                          DB  16, 16, 16, 199, 126, 53, 53, 53, 53, 52, 52, 52, 52, 54, 54, 53, 53, 53, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 21, 79, 53, 53, 53, 53, 53, 53, 53, 79, 174
	                          DB  54, 53, 54, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 27, 27, 26, 79, 54, 54, 79, 79, 79, 28, 27, 151, 151, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 23, 28
	                          DB  174, 23, 27, 103, 103, 103, 27, 174, 23, 28, 22, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 29, 22, 79, 24, 23, 29, 29, 29, 22, 79, 24, 23, 27, 20, 16, 16, 16
	                          DB  16, 16, 16, 16, 16, 16, 16, 19, 29, 26, 174, 23, 26, 29, 29, 29, 26, 149, 23, 26, 27, 20, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 19, 29, 29, 27, 28, 29, 29, 29
	                          DB  29, 29, 27, 28, 29, 27, 20, 17, 16, 16, 16, 16, 16, 16, 16, 17, 19, 25, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 24, 19, 16, 16, 16, 16, 16, 16, 16
	                          DB  17, 22, 25, 26, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 26, 25, 22, 16, 16, 16, 16, 16, 16, 16, 22, 27, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29
	                          DB  28, 28, 27, 21, 16, 16, 16, 16, 16, 16, 22, 26, 26, 26, 28, 29, 29, 29, 29, 29, 29, 29, 29, 28, 27, 26, 26, 26, 21, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 23
	                          DB  26, 28, 29, 29, 29, 29, 29, 25, 23, 18, 18, 18, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 22, 22, 22, 22, 22, 22, 18, 16, 16, 16, 16, 16, 16, 16
	                          DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
â€‹                                                                                                                                                                                                                             		;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	heart_img                 DB  16, 16, 16, 16, 16, 16, 16, 152, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 154, 228, 153, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 153, 228, 110, 204, 153
	                          DB  16, 16, 16, 16, 16, 16, 16, 16, 16, 153, 228, 110, 39, 109, 204, 225, 16, 16, 16, 16, 16, 16, 16, 16, 228, 110, 39, 39, 39, 109, 204, 153, 16, 16, 16, 16, 16, 16, 201, 204
	                          DB  109, 39, 39, 39, 39, 110, 204, 24, 16, 16, 16, 16, 152, 204, 109, 39, 39, 12, 12, 39, 39, 110, 129, 16, 16, 16, 152, 204, 109, 39, 39, 12, 12, 12, 12, 39, 39, 109, 226, 16
	                          DB  16, 129, 180, 39, 39, 12, 12, 12, 12, 12, 12, 39, 109, 200, 16, 23, 204, 109, 39, 12, 12, 12, 12, 12, 12, 12, 38, 109, 109, 128, 23, 202, 39, 12, 12, 12, 12, 12, 12, 12
	                          DB  12, 87, 12, 110, 225, 24, 129, 110, 12, 12, 12, 12, 109, 12, 12, 12, 87, 12, 202, 129, 16, 128, 204, 12, 12, 12, 134, 129, 204, 12, 63, 12, 134, 201, 16, 16, 16, 129, 134, 12
	                          DB  134, 227, 23, 152, 204, 133, 133, 227, 24, 16, 16, 16, 23, 228, 201, 226, 23, 16, 24, 152, 201, 202, 24, 16, 16
 
   
	Black_heart_img           DB  16, 16, 16, 16, 16, 16, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 224, 224, 18
	                          DB  17, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 224, 224, 224, 224, 17, 17, 16, 16, 16, 16, 16, 17, 17, 18, 224, 224, 224, 224, 224, 224, 17, 16, 16, 16, 16, 17, 17, 18, 224
	                          DB  224, 224, 224, 224, 224, 224, 224, 17, 17, 16, 16, 17, 18, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 17, 16, 16, 17, 18, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 17, 17
	                          DB  17, 18, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 17, 17, 18, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 19, 224, 17, 17, 18, 224, 224, 224, 224, 224, 224, 224, 224
	                          DB  224, 19, 28, 227, 17, 17, 18, 224, 224, 224, 224, 224, 224, 224, 224, 19, 27, 20, 224, 17, 16, 17, 224, 224, 224, 224, 18, 17, 18, 224, 27, 21, 224, 17, 16, 16, 17, 17, 18, 224
	                          DB  18, 17, 16, 17, 18, 18, 224, 17, 16, 16, 16, 16, 17, 17, 17, 17, 16, 16, 16, 17, 17, 17, 16, 16, 16

	DubPower                  DB  16, 16, 16, 16, 16, 16, 16, 16, 28, 224, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 201, 136, 42, 200, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 200, 138, 42, 43
	                          DB  177, 16, 16, 16, 16, 16, 16, 16, 16, 201, 230, 140, 43, 43, 234, 128, 16, 16, 16, 16, 16, 16, 16, 223, 234, 140, 43, 43, 43, 201, 16, 16, 16, 16, 16, 16, 20, 227, 137, 42
	                          DB  43, 43, 43, 235, 226, 16, 16, 16, 16, 16, 16, 200, 138, 43, 43, 43, 43, 43, 206, 227, 16, 16, 16, 16, 16, 200, 140, 43, 43, 43, 43, 43, 43, 206, 177, 177, 177, 177, 225, 16
	                          DB  200, 140, 140, 140, 140, 140, 43, 43, 43, 43, 43, 43, 43, 138, 201, 16, 200, 200, 200, 200, 200, 137, 42, 43, 43, 43, 43, 43, 138, 201, 16, 16, 16, 16, 16, 177, 139, 43, 43, 43
	                          DB  43, 43, 140, 226, 23, 16, 16, 16, 16, 200, 137, 42, 43, 43, 43, 43, 43, 139, 201, 16, 16, 16, 16, 20, 229, 140, 43, 43, 43, 43, 43, 43, 227, 22, 16, 16, 16, 16, 200, 138
	                          DB  43, 43, 43, 43, 43, 43, 43, 200, 16, 16, 16, 16, 16, 200, 234, 235, 235, 235, 235, 235, 235, 236, 200, 16, 16
    
	Shield                  DB 16, 16, 16, 18, 21, 21, 21, 21, 21, 21, 19, 18, 16, 16, 16, 16, 16, 16, 19, 23, 22, 162, 163, 139, 164, 21, 232, 16, 16, 16, 16, 16, 18, 21, 22, 25, 66, 66, 43, 140 
                            DB 23, 20, 18, 16, 16, 16, 16, 20, 23, 22, 66, 66, 66, 43, 42, 163, 22, 19, 16, 16, 16, 18, 23, 22, 27, 66, 66, 66, 43, 43, 42, 163, 21, 18, 16, 18, 21, 22, 24, 66 
                            DB 66, 66, 66, 43, 43, 43, 140, 23, 19, 16, 18, 24, 162, 66, 66, 66, 66, 66, 43, 43, 43, 42, 161, 22, 18, 224, 25, 162, 66, 66, 66, 66, 66, 43, 43, 43, 43, 137, 23, 18 
                            DB 224, 25, 162, 66, 66, 66, 66, 66, 43, 43, 43, 43, 137, 23, 18, 224, 25, 162, 66, 66, 66, 66, 66, 43, 43, 43, 43, 137, 23, 18, 224, 25, 162, 66, 66, 66, 66, 66, 43, 43 
                            DB 43, 43, 137, 23, 18, 18, 25, 162, 66, 66, 66, 66, 66, 43, 43, 43, 43, 137, 23, 18, 21, 24, 20, 24, 24, 24, 24, 24, 24, 140, 140, 140, 236, 23, 19, 23, 23, 22, 23, 20 
                            DB 23, 21, 22, 20, 23, 21, 21, 22, 23, 20, 207, 22, 18, 18, 18, 18, 20, 23, 19, 18, 18, 18, 19, 22, 18

	SpeedUp                 DB 16, 16, 6, 6, 6, 43, 43, 43, 43, 43, 43, 14, 16, 16, 16, 16, 6, 6, 43, 43, 43, 43, 43, 43, 43, 43, 14, 14, 14, 16, 6, 6, 43, 43, 43, 42, 42, 42, 42, 43 
                            DB 43, 43, 14, 14, 14, 6, 6, 43, 43, 43, 42, 42, 42, 42, 43, 43, 43, 43, 14, 14, 6, 43, 43, 43, 6, 43, 43, 43, 43, 43, 14, 43, 43, 14, 14, 6, 43, 43, 43, 6 
                            DB 43, 43, 43, 43, 43, 14, 43, 43, 14, 14, 6, 43, 43, 43, 6, 43, 43, 43, 43, 43, 14, 43, 43, 14, 14, 6, 43, 43, 43, 6, 43, 43, 43, 43, 43, 14, 43, 43, 14, 14 
                            DB 6, 43, 43, 43, 6, 43, 43, 43, 43, 43, 14, 43, 43, 14, 14, 6, 43, 43, 43, 6, 43, 43, 43, 43, 43, 14, 43, 43, 14, 14, 6, 43, 43, 43, 6, 43, 43, 43, 43, 43 
                            DB 14, 43, 43, 14, 14, 6, 6, 43, 43, 43, 14, 14, 14, 14, 43, 43, 43, 43, 14, 14, 6, 6, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 14, 14, 14, 16, 6, 6, 6, 43 
                            DB 43, 43, 43, 43, 43, 43, 14, 14, 14, 16, 16, 16, 6, 6, 6, 43, 14, 14, 14, 14, 14, 14, 14, 16, 16
                            â€‹
	COIN					DB 6, 6, 42, 43, 43, 43, 14, 14, 6, 43, 43, 42, 42, 43, 43, 14, 42, 43, 42, 43, 43, 43, 43, 14, 42, 43, 42, 43, 43, 14, 43, 14, 42, 43, 42, 43, 43, 14, 43, 14 
 							DB 6, 43, 42, 43, 43, 43, 43, 14, 6, 43, 43, 43, 43, 43, 43, 14, 6, 6, 43, 43, 43, 14, 14, 14
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;; fish variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	fish_W                    equ 20                                                                                                                                                                                              	; fish width
	fish_H                    equ 20                                                                                                                                                                                              	; fish height
	xf                        dw  ?                                                                                                                                                                                               	;  fish x coordinate
	yf                        dw  ?                                                                                                                                                                                               	; fish y coordinate
	fish_velocity             dw  02h
	start_hitting             dw  0                                                                                                                                                                                               	; flag to indicate that cat hits the dog
	direction_of_hitting      dw  1                                                                                                                                                                                               	; default right  cat =>>> dog

	fish_img                  DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 31, 30, 31, 31, 31, 30, 31, 31, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 31, 30, 30, 31, 31, 31, 30, 31, 31, 30, 31, 31, 30, 31, 31, 31, 31, 31, 31, 31, 29, 23, 23, 30, 31, 28, 28, 28, 28, 27, 29, 31, 31, 31, 31, 30
	                          DB  31, 31, 31, 31, 26, 241, 21, 26, 26, 20, 20, 17, 20, 21, 23, 28, 31, 31, 31, 31, 31, 31, 31, 31, 28, 169, 21, 23, 24, 28, 26, 20, 26, 26, 22, 26, 31, 31, 30, 31
	                          DB  31, 31, 31, 31, 28, 23, 21, 23, 23, 29, 28, 25, 28, 26, 22, 26, 31, 31, 31, 31, 31, 31, 31, 31, 26, 20, 21, 26, 27, 21, 21, 21, 21, 20, 24, 29, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 30, 23, 24, 30, 31, 28, 27, 28, 28, 28, 29, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29, 30, 31, 31, 31, 31, 31, 30, 30, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
	                          DB  31, 31, 31, 31, 31, 31, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31
â€‹
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; dog variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	dog_W                     equ 30                                                                                                                                                                                              	; dog width
	dog_H                     equ 25                                                                                                                                                                                              	;dog height
	xd                        dw  ?                                                                                                                                                                                               	; dog x coordinate
	xright_dog                dw  ?                                                                                                                                                                                               	; dog x coordinate (left)
	yd                        dw  ?                                                                                                                                                                                               	; dog y coordinate
	ybelow_dog                dw  ?                                                                                                                                                                                               	; dog y coordinate (below)
	dog_img                 DB 16, 24, 24, 209, 18, 18, 18, 18, 18, 18, 18, 18, 21, 232, 18, 18, 18, 19, 24, 18, 18, 21, 24, 16, 16, 16, 16, 16, 16, 16, 23, 233, 232, 24, 65, 24, 24, 65, 65, 65 
							DB 24, 24, 236, 163, 65, 163, 22, 28, 232, 65, 65, 233, 19, 16, 16, 16, 16, 16, 16, 16, 18, 24, 164, 20, 20, 21, 161, 65, 65, 65, 235, 18, 163, 235, 162, 65, 164, 233, 65, 65 
							DB 164, 234, 19, 16, 16, 16, 16, 16, 16, 16, 18, 24, 234, 18, 227, 21, 24, 65, 65, 65, 65, 232, 18, 18, 162, 65, 164, 234, 65, 164, 232, 19, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 18, 163, 234, 18, 18, 138, 65, 65, 65, 65, 164, 22, 22, 19, 162, 65, 164, 138, 65, 18, 21, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 224, 18, 16, 18, 138, 65, 65, 65, 65 
							DB 18, 28, 30, 25, 163, 163, 163, 163, 163, 18, 22, 16, 16, 16, 19, 18, 18, 18, 16, 16, 16, 16, 16, 16, 18, 137, 164, 65, 65, 65, 18, 28, 29, 29, 26, 23, 23, 23, 23, 224 
							DB 232, 22, 232, 224, 22, 23, 23, 23, 224, 21, 16, 16, 16, 16, 16, 19, 236, 138, 138, 138, 24, 29, 29, 30, 26, 24, 24, 24, 24, 24, 24, 24, 25, 24, 27, 30, 30, 29, 18, 21 
							DB 16, 16, 16, 16, 16, 16, 18, 18, 19, 25, 29, 30, 30, 24, 163, 164, 164, 164, 164, 22, 22, 22, 22, 26, 30, 30, 30, 29, 18, 21, 16, 16, 16, 16, 16, 16, 16, 207, 19, 30 
							DB 30, 30, 23, 163, 24, 65, 65, 24, 236, 18, 164, 164, 234, 20, 25, 30, 28, 21, 18, 22, 16, 16, 16, 16, 16, 16, 16, 18, 19, 21, 21, 21, 224, 164, 65, 65, 164, 235, 18, 18 
							DB 234, 24, 24, 137, 23, 30, 29, 26, 18, 21, 16, 16, 16, 16, 16, 16, 16, 16, 20, 224, 224, 18, 163, 65, 65, 65, 164, 18, 18, 18, 18, 24, 65, 138, 19, 23, 29, 28, 18, 21 
							DB 16, 16, 16, 16, 16, 27, 19, 224, 229, 29, 232, 164, 236, 232, 163, 65, 65, 164, 18, 18, 164, 65, 65, 138, 23, 26, 19, 19, 19, 23, 16, 16, 16, 16, 20, 19, 138, 65, 24, 18 
							DB 65, 232, 18, 18, 18, 138, 65, 65, 65, 24, 209, 18, 163, 65, 162, 18, 16, 16, 16, 16, 16, 16, 16, 19, 234, 162, 65, 65, 24, 18, 65, 233, 19, 229, 232, 138, 65, 65, 65, 18 
							DB 18, 18, 18, 162, 162, 18, 20, 16, 16, 16, 16, 16, 16, 18, 163, 65, 65, 65, 24, 18, 65, 232, 26, 30, 24, 138, 65, 65, 65, 18, 20, 20, 232, 162, 162, 18, 234, 232, 16, 16 
							DB 16, 16, 19, 235, 164, 65, 65, 65, 24, 18, 65, 137, 18, 24, 23, 162, 65, 65, 65, 18, 27, 30, 22, 162, 23, 138, 24, 235, 19, 20, 16, 16, 18, 164, 65, 65, 65, 24, 163, 137 
							DB 65, 65, 139, 137, 164, 65, 65, 65, 65, 137, 18, 25, 163, 139, 163, 24, 65, 65, 137, 235, 16, 16, 18, 164, 65, 65, 24, 164, 232, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65 
							DB 138, 138, 164, 138, 138, 65, 65, 65, 65, 209, 16, 16, 18, 164, 65, 65, 65, 164, 232, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 138, 138, 65, 65, 65, 65, 20 
							DB 16, 16, 232, 138, 138, 164, 65, 24, 163, 65, 138, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 163, 139, 164, 65, 65, 65, 65, 20, 16, 16, 16, 18, 18, 137, 138, 138, 138, 138 
							DB 22, 162, 24, 65, 65, 65, 65, 65, 65, 65, 65, 65, 137, 162, 65, 65, 24, 138, 138, 232, 16, 16, 16, 16, 16, 19, 224, 224, 224, 224, 23, 22, 163, 164, 65, 65, 65, 65, 65, 65 
							DB 138, 24, 24, 24, 65, 164, 137, 224, 224, 21, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22, 21, 163, 65, 65, 65, 65, 234, 20, 234, 234, 234, 234, 235, 227, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 19, 234, 233, 233, 233, 233, 19, 23, 19, 19, 19, 19, 20, 16, 16, 16, 16
	;;;;;;;;;;;;;;;;;;;;;;;;;;;; ball variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ball_W                    equ 15                                                                                                                                                                                              	; ball width
	ball_H                    equ 10                                                                                                                                                                                              	; ball  height
	xball                     dw  ?                                                                                                                                                                                               	;  ball x coordinate
	yball                     dw  ?                                                                                                                                                                                               	; ball y coordinate
	ball_velocity             dw  02h
	start_balling             dw  0                                                                                                                                                                                               	; flag to indicate that dog hits the cat
	ball_img                  DB  16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 18, 198, 54, 54, 54, 54, 54, 54, 54, 198, 17, 16, 16, 17, 223, 151, 54, 54, 54, 54, 54, 54, 54
	                          DB  54, 54, 126, 198, 17, 16, 149, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 125, 16, 16, 149, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 125, 16, 16, 149, 54, 54, 54
	                          DB  54, 54, 54, 54, 54, 54, 54, 54, 125, 16, 16, 149, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 125, 16, 16, 223, 125, 54, 54, 54, 54, 54, 54, 54, 54, 54, 126, 198, 16
	                          DB  16, 17, 18, 198, 54, 54, 54, 54, 54, 54, 54, 198, 18, 17, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16                                                                        	;;Cat Moving Variables
â€‹
	;;;;;;;;;;; LOGO cat & dog ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	catlo_W                   equ 15
	catlo_H                   equ 15
	xcatlo                    dw  2
	ycatlo                    dw  0
â€‹    logo_cat_img              DB 16, 16, 16, 16, 32, 32, 55, 55, 55, 32, 32, 30, 32, 32, 16, 16, 16, 16, 16, 55, 53, 52, 52, 52, 53, 55, 32, 53, 54, 32, 16, 16, 176, 55, 53, 54, 54, 52, 52, 52
	                          DB  53, 53, 52, 54, 32, 16, 16, 176, 55, 53, 54, 53, 52, 52, 52, 52, 53, 53, 54, 32, 16, 16, 29, 224, 9, 53, 52, 52, 52, 53, 9, 127, 53, 54, 32, 16, 16, 16, 25, 27
	                          DB  56, 54, 54, 54, 56, 28, 25, 1, 32, 16, 16, 17, 18, 27, 20, 23, 27, 27, 27, 23, 21, 27, 18, 17, 16, 16, 16, 24, 23, 148, 151, 28, 28, 28, 220, 24, 24, 23, 16, 16
	                          DB  16, 16, 24, 27, 21, 24, 28, 28, 28, 23, 21, 27, 23, 16, 16, 16, 18, 25, 28, 28, 28, 28, 28, 28, 28, 28, 28, 24, 18, 16, 16, 21, 23, 28, 28, 28, 28, 28, 28, 28
	                          DB  28, 28, 23, 20, 17, 19, 24, 25, 26, 28, 28, 28, 28, 28, 28, 28, 26, 25, 24, 19, 21, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 21, 16, 16, 16, 20, 25
	                          DB  28, 28, 28, 28, 26, 23, 16, 16, 16, 16, 16, 16, 16, 17, 18, 20, 20, 20, 20, 19, 17, 16, 16, 16, 16
	;************************************
	doglo_W                   equ 15
	doglo_H                   equ 15
	xdoglo                    dw  301
	ydoglo                    dw  0
â€‹    logo_dog_img              DB 16, 224, 19, 30, 16, 16, 18, 18, 25, 30, 22, 16, 16, 16, 16, 18, 25, 26, 232, 18, 18, 26, 26, 28, 29, 22, 16, 16, 16, 16, 18, 28, 30, 28, 26, 26, 137, 137, 24, 30
	                          DB  29, 20, 28, 16, 16, 18, 24, 29, 20, 162, 235, 163, 65, 164, 25, 30, 23, 28, 16, 16, 18, 28, 28, 138, 164, 18, 18, 164, 65, 234, 19, 19, 16, 16, 16, 18, 23, 24, 138, 24
	                          DB  235, 235, 24, 163, 138, 20, 19, 18, 16, 16, 16, 23, 229, 24, 233, 138, 65, 164, 18, 18, 163, 162, 164, 234, 16, 16, 18, 18, 162, 18, 18, 65, 164, 23, 23, 163, 162, 65, 163, 18
	                          DB  18, 138, 138, 162, 27, 21, 65, 24, 25, 19, 164, 162, 65, 24, 233, 236, 24, 164, 139, 23, 236, 65, 65, 164, 164, 24, 139, 65, 65, 139, 161, 65, 65, 138, 164, 24, 65, 65, 65, 65
	                          DB  65, 138, 65, 65, 139, 162, 65, 65, 138, 65, 65, 65, 65, 65, 65, 164, 164, 65, 164, 138, 233, 138, 65, 163, 24, 65, 65, 65, 65, 164, 21, 234, 234, 233, 18, 16, 18, 138, 163, 139
	                          DB  138, 65, 65, 164, 19, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 137, 137, 235, 16, 16, 16, 16, 16, 16
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                                                                                                                                                                                         		;;Cat Moving Variables
â€‹
	;;Gravity Variables
	GravityRange              dw  ?
	LandLine                  dw  142d
	firststepline             dw  105d
	secondstepline            dw  69d
	GravityAccleration        dw  8d
	isFalling                 dw  0
	isJumping				  dw 0
	;detect if the player is falling or not
	; health bar drawing
	HealthBarPos              db  '$'
	temp_cx_HealthBar         dw  '$'
	temp2_cx_HealthBar        dw  '$'
	temp_dx_HealthBar         dw  '$'
	temp_cx_HealthFillingBar  dw  '$'
	temp2_cx_HealthFillingBar dw  '$'

	; save the location of the health of 1st player
	Player1_Health_cx         dw  '$'
	; save the location of the health of 2nd player
	Player2_Health_cx         dw  '$'


	Player1_DecHealth         dw  0                                                                                                                                                                                               	; If 1st player got hit
	Player2_DecHealth         dw  0                                                                                                                                                                                               	; If 2nd player got hit

	Player2_IncHealth         dw  0                                                                                                                                                                                               	; If 1st player got powerup
	Player1_IncHealth         dw  0                                                                                                                                                                                               	; If 2nd player got powerup
	tempvar                   dw  0                                                                                                                                                                                               	; temp
	HealthBarDrawn            dw  0                                                                                                                                                                                               	;to make sure that its drawn only once
	countHB1                  dw  0                                                                                                                                                                                               	;for only doubling the decreasing value of health of player 1
	countHB2                  dw  0                                                                                                                                                                                               	;for only doubling the decreasing value of health of player 2
	countINC1                 dw  0                                                                                                                                                                                               	;for only doubling the increasing value of health of player 1
	countINC2                 dw  0     
	
	;-----------------------------------GAME OVER ---------------------------------------------------------
	THE_WINNER                         db         'THE WINNER IS ','$'
	GAME_OVER_STR                      db         'GAME OVER ...','$'
	ANGRY_PETS                         db         '<<<<<<< ANGRY PETS >>>>>>>','$'
	FINALMSG_MENU                      db         'Press 1 to return to the main menu','$'                        
	FINALMSG_ESC                       db         'Press ESC to end the game','$'                        
                                                                                                                                                                                          	;for only doubling the increasing value of health of player 1

;----------------------------------- MAIN MENU ----------------------------------------------------------------
	MSG1                      DB  '*        ANGRY PETS        *',10,13,'$'
	MSG2                      DB  '--------------------------------------',10,13,'$'
	MSG3                      DB  'Please Enter First Player Name',10,13,'$'
	MSG4                      DB  'NAME: ', '$'
	MSG5                      DB  'Press Enter To Continue',10,13,'$'
	MSG6                      DB  'Note :The username should not exceed 15 characters and start with a letter',10,13,'$'
	FIRST_PLAYER_NAME         DB  15,?,15 dup(?),'$'
	ISFIRSTPLAYER             DB  1
	MSG7                      DB  'Please Enter Second Player Name',10,13,'$'
	SECOND_PLAYER_NAME        DB   15,?,15 dup(?),'$'
	MSG8                      DB  'FIRST PLAYER: ','$'
	MSG9                      DB  'SECOND PLAYER: ','$'
	MSG13                     DB  'This option is currently not available','$'
	MSG14                     DB  'The game will start now ... enjoy <3','$'
	ERRMSG DB '>>>>>>>>>>>>Your name should start with a letter only<<<<<<<<<<<<','$'
	ISVALID DB 1
	CurrentScore              DB 0
	LOGO_W                    DW  60
	LOGO_H                    DW  40
	LOGO_img                DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18 
							DB 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 18, 209, 209, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 
							DB 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 209, 6, 6, 42, 42, 42, 6, 210, 114 
							DB 6, 6, 6, 42, 42, 42, 42, 42, 42, 6, 6, 114, 209, 18, 6, 42, 42, 42, 42, 6, 114, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 209, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42 
							DB 114, 18, 18, 18, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 210, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 210, 6, 6, 6, 114, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 6, 42, 42, 42, 42, 42, 6, 6 
							DB 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 210, 42, 42, 42, 42, 42, 115, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42 
							DB 211, 42, 42, 42, 42, 42, 42, 6, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 210, 42, 42, 6, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 42, 42, 42, 209, 211, 115, 6, 42, 42, 42, 42, 114, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 209, 18, 18, 18, 209, 6, 42, 42, 42, 209, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 6, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 210, 18, 18, 17, 18, 18, 211, 42, 42, 6, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 6, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 114, 18, 18, 16, 16, 18, 18, 210, 42, 42, 6, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 6, 42, 42, 42, 42, 115, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 6, 18, 18, 16, 16, 16, 17, 18, 211, 42, 42, 6, 18, 18, 18, 18, 17, 17, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 6, 18, 18, 16, 16, 16, 16, 18, 18, 114, 42, 42, 42, 114, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 18, 18, 16, 16, 16, 16, 16, 18, 18, 210, 42, 42, 42, 42, 6, 6, 115, 18, 18 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 42 
							DB 6, 18, 18, 16, 16, 16, 16, 16, 16, 18, 18, 18, 6, 42, 42, 42, 42, 42, 6, 18, 16, 17, 17, 17, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 115, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 211, 6, 42, 42, 42, 114, 18 
							DB 18, 18, 18, 18, 18, 18, 17, 16, 16, 18, 18, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42 
							DB 6, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 209, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 6, 18, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 18, 18 
							DB 18, 114, 6, 6, 210, 18, 18, 18, 16, 18, 18, 6, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 6, 18, 17, 16, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 115, 18, 18, 16, 18, 18, 6, 42, 42, 42, 6, 42, 42, 42, 42 
							DB 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 18, 16, 18, 18, 114, 114, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 18, 209, 42, 42, 42, 115, 18, 18, 16, 16, 18, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42 
							DB 210, 18, 16, 16, 18, 6, 42, 42, 114, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 211, 42, 42, 6, 18, 18, 18, 16, 18, 18, 210, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 18, 18, 16, 16, 18, 209, 42, 42, 42, 114, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 18, 211, 42, 42, 42, 18, 18, 18, 18, 18, 18, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 209, 18, 18, 18, 18, 114, 42, 42, 42, 210, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 6, 210, 209, 210, 114, 6, 6, 6, 42, 42, 42, 42, 42, 42, 6 
							DB 6, 6, 6, 6, 42, 42, 42, 42, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 114, 209, 209, 114, 42, 42, 42, 114, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 18, 18, 211, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 209, 210, 6, 6, 6, 6, 209, 115, 211, 209, 115, 6, 6, 209, 211, 6, 42, 42, 6, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 6, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 18, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 6, 18, 114, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 115, 6, 42, 42, 42, 42, 42, 6, 209, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 18, 18, 210, 6, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 6, 159, 25, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 209 
							DB 18, 115, 6, 6, 115, 210, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 209, 114, 114, 210, 18, 18, 42, 42, 42, 115, 21, 24, 21, 6 
							DB 42, 42, 42, 42, 207, 22, 137, 42, 42, 42, 42, 6, 115, 6, 42, 42, 42, 42, 42, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18, 42, 42, 42, 210, 29, 24, 30, 21, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 210, 23, 21, 6, 42, 42, 42, 6, 18 
							DB 18, 16, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 114, 42, 42, 114, 28, 26, 29, 21 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 24, 26, 24, 235, 42, 42, 42, 115, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 209, 22, 20, 114, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 21, 27, 26, 234, 42, 42, 42, 210, 18 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 114, 42, 42, 42, 6, 6, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 114, 210, 6, 42, 42, 42, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 18, 18 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42 
							DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 18, 18 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 210, 42, 42, 6, 209, 18, 114 
							DB 6, 42, 210, 18, 18, 18, 18, 18, 209, 209, 210, 210, 209, 210, 42, 42, 42, 114, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 114, 42, 6, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 209, 6, 42, 209, 18, 17 
							DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 18, 16, 16, 16, 16, 18, 18, 114, 6, 209, 18, 18, 17, 18 
							DB 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 18, 18, 18, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 


Title_H					DW 55
Title_W					DW 102

Title_img 				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 41, 41, 41, 16, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 41, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 42, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 42, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 41, 41, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 43, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 42, 41, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43 
						DB 43, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 16, 16, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 42, 42, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 43, 42, 41, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43 
						DB 43, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
						DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 16, 16, 41, 41, 41, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 42, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 16, 16, 16, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 41, 41 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 6, 6, 6, 6, 6, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 6, 6, 6, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 18, 18, 18, 18, 18, 18, 18, 18, 42, 43, 43, 43, 43, 43, 18, 18, 6, 43 
						DB 43, 43, 43, 43, 139, 18, 18, 18, 18, 18, 18, 18, 210, 43, 43, 43, 43, 43, 43, 43, 43, 43, 116, 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 210, 18, 18, 18, 18, 18, 18, 18, 210, 43, 43, 43, 43, 43, 43, 18, 18, 6, 43, 43, 43, 43, 43, 116, 18, 18, 18, 18, 18, 18, 18, 18, 115, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 115, 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 41, 41, 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 209, 18, 116, 6, 6, 6, 6, 42, 43, 43, 43, 43, 43, 43, 43 
						DB 18, 18, 6, 43, 43, 43, 43, 43, 43, 42, 6, 6, 6, 6, 6, 115, 18, 212, 43, 43, 43, 212, 211, 211, 211, 211, 210, 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 209, 18, 115, 115, 116, 116, 116, 116, 43, 43, 43, 43, 43, 43, 43, 18, 18, 6, 43, 43, 43, 43, 43, 43, 116, 115, 115, 115, 115, 115, 115, 18, 212 
						DB 43, 43, 212, 18, 18, 18, 18, 18, 18, 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 41, 41, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 18, 18, 18, 18, 18, 18, 18, 212, 43, 43 
						DB 43, 43, 43, 43, 18, 18, 6, 43, 43, 43, 43, 43, 115, 18, 18, 18, 18, 18, 210, 115, 18, 212, 43, 43, 210, 18, 115, 116, 6, 116, 212, 18, 212, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 115, 212, 212, 212, 212, 211, 18, 18, 6, 43, 43, 43, 43, 43, 18, 18, 6, 43, 43, 43, 43, 43, 209, 18, 212, 115, 115, 115 
						DB 115, 115, 18, 212, 43, 43, 210, 18, 116, 43, 43, 43, 116, 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6 
						DB 18, 18, 6, 43, 43, 43, 43, 6, 18, 18, 6, 43, 43, 43, 43, 43, 209, 18, 116, 43, 43, 43, 43, 115, 18, 212, 43, 43, 210, 18, 116, 43, 43, 43, 6, 115, 116, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 212, 210, 210, 210, 210, 210, 210, 18, 18, 42, 43, 115, 210, 210, 210, 18, 18, 209, 210, 210, 212, 43, 43, 210, 18 
						DB 18, 210, 210, 210, 210, 18, 18, 115, 43, 43, 211, 18, 18, 210, 210, 210, 210, 210, 210, 115, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43 
						DB 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 210, 18, 18 
						DB 18, 18, 18, 18, 18, 116, 43, 43, 212, 18, 18, 18, 18, 18, 18, 18, 18, 210, 43, 43, 116, 18, 18, 18, 18, 18, 18, 18, 209, 6, 43, 43, 6, 18, 18, 18, 18, 18, 18, 18 
						DB 18, 212, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 6, 6, 6, 6, 6, 6, 6, 6, 43, 43, 43, 42, 6, 6, 6, 6, 6, 6, 6, 6, 6 
						DB 43, 43, 43, 6, 6, 6, 6, 6, 6, 6, 43, 43, 43, 43, 43, 6, 6, 6, 6, 6, 6, 6, 6, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41 
						DB 41, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41 
						DB 41, 41, 41, 41, 41, 41, 42, 43, 43, 43, 41, 41, 42, 43, 43, 43, 42, 41, 42, 43, 43, 43, 43, 41, 41, 41, 41, 41, 41, 41, 42, 43, 43, 43, 42, 41, 41, 43, 43, 43 
						DB 42, 41, 41, 43, 43, 42, 41, 41, 42, 43, 43, 43, 43, 43, 42, 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43, 43, 43, 42, 41, 41, 42, 43, 43, 42, 41 
						DB 41, 43, 43, 43, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 43, 42, 41, 41, 42, 43, 43, 42, 41, 41, 43, 43, 43, 41, 41, 41, 42, 42, 42, 42, 42, 41, 41, 42, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 42, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 42, 41, 41, 41, 42, 41, 41, 41, 43, 43, 43, 41, 41, 42, 42, 42, 42, 42, 41, 41, 42, 43, 43, 42, 41 
						DB 41, 41, 42, 43, 42, 41, 41, 43, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41, 41, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 42, 41, 41, 41 
						DB 41, 41, 41, 41, 41, 43, 43, 43, 41, 41, 42, 42, 43, 43, 43, 42, 41, 42, 43, 43, 42, 41, 41, 41, 41, 42, 42, 41, 41, 43, 43, 43, 43, 41, 41, 41, 41, 41, 41, 41 
						DB 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 43, 43, 41, 41, 41, 41, 42, 41, 41, 41, 41, 43, 43, 43, 41, 41, 41, 41, 42, 43, 43, 42, 41, 42 
						DB 43, 43, 42, 41, 41, 41, 41, 41, 42, 41, 41, 43, 43, 43, 43, 42, 41, 41, 42, 42, 42, 41, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43 
						DB 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 43, 43 
						DB 41, 41, 42, 43, 43, 43, 42, 41, 41, 43, 43, 43, 41, 41, 41, 41, 42, 43, 43, 42, 41, 42, 43, 43, 42, 41, 42, 42, 41, 41, 41, 41, 41, 43, 43, 43, 43, 43, 41, 41 
						DB 42, 42, 41, 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41, 41, 42, 43, 43, 43, 42, 41, 41, 42, 43, 43, 41, 41, 42, 43, 43, 43, 42, 41, 41, 43, 43, 43, 43, 43, 42, 42, 43, 43 
						DB 43, 42, 41, 42, 43, 43, 42, 41, 42, 43, 42, 41, 41, 41, 41, 43, 43, 43, 43, 43, 42, 41, 41, 42, 41, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43 
						DB 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41, 41, 43, 43, 43, 43, 43, 41 
						DB 41, 42, 43, 43, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 42, 42, 42, 42, 42, 42, 41, 41, 42, 43, 43, 42, 41, 42, 43, 43, 41, 41, 41, 41, 42, 43, 43 
						DB 43, 43, 43, 41, 41, 41, 41, 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41 
						DB 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 41, 41, 43, 43, 43, 43, 43, 41, 41, 42, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 43, 43, 43, 41 
						DB 41, 41, 41, 41, 41, 41, 41, 42, 43, 43, 42, 41, 42, 43, 43, 43, 41, 41, 41, 41, 43, 43, 43, 43, 43, 42, 41, 41, 41, 41, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 43, 43 
						DB 43, 43, 43, 42, 42, 42, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 42, 42, 42, 43, 43, 43, 42, 42 
						DB 42, 42, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
						DB 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 43 
						DB 16, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 41, 41, 41, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 43, 43, 43, 43, 43, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 42, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 41, 41, 43 
						DB 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 41, 41 
						DB 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 41, 41, 41, 41, 41, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 41 
						DB 41, 41, 16, 16, 16, 16, 16, 16, 41, 41, 16, 41, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
						DB 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41 
						DB 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41 
						DB 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 41, 42, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 43, 43, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 43, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 43, 43, 43, 43, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 43, 42, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41 
						DB 42, 43, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
						DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16



PETS_W			DW		253
PETS_H			DW		78
PETS_img		DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 16, 16, 139, 16, 186, 16, 16, 139, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 139, 16, 186, 16, 16, 139, 16, 16, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 25, 139, 23, 24, 186, 24, 25, 25, 26, 138 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 23, 25, 24, 25, 164, 24, 25, 25, 23, 25, 24, 16 
				DB 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 41, 42, 42, 41, 42, 41, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 27, 91, 24, 90, 91, 24, 91, 89, 26, 91, 25, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 26, 91, 24, 91, 90, 24, 91, 26, 26, 91, 26, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 16, 16, 16, 16, 16, 16, 16, 20, 24, 163, 23, 23, 20 
				DB 26, 91, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 161, 21, 163, 20, 16, 23, 163, 16, 16, 16, 16, 16 
				DB 23, 28, 23, 25, 25, 22, 25, 24, 22, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 23, 26, 22 
				DB 23, 23, 22, 24, 23, 16, 16, 16, 16, 163, 163, 162, 24, 234, 163, 21, 163, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 163, 24, 164, 23, 24, 162, 27 
				DB 162, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 27, 91, 25, 91, 91, 26, 91, 91, 25, 91, 25, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 26, 91, 24, 91, 91, 26, 91, 89, 27, 91, 26, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41 
				DB 16, 16, 16, 16, 16, 16, 16, 25, 91, 24, 90, 91, 26, 91, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 163, 91, 89, 26, 91, 24, 91, 26, 16, 16, 16, 16, 16, 25, 29, 28, 26, 29, 23, 29, 29, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 26, 29, 24, 29, 29, 24, 29, 29, 16, 16, 16, 16, 25, 90, 24, 27, 90, 24, 90, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 24, 90, 26, 89, 90, 24, 90, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 23, 91, 163, 90, 91, 23, 91, 89, 27, 91, 26, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 91, 25, 91, 90, 164, 91, 26, 25, 91, 161, 16, 16 
				DB 16, 185, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 23, 91, 24, 91, 91, 26, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26, 91, 90, 27, 91, 26, 91, 26, 16, 16, 16, 16, 16, 22, 29, 28, 28, 29, 24, 29, 29, 25, 28, 28, 28, 28, 28 
				DB 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 26, 29, 26, 29, 29, 24, 29, 27, 16, 16, 16, 16, 24, 90, 25, 90, 90 
				DB 24, 90, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 27, 90, 27, 90, 90, 24, 90, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 186, 24, 16, 164, 25, 23, 26, 27, 28, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 28, 26, 29, 27, 26, 164, 25, 163, 24, 23, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 23, 26, 23, 26, 27, 27, 89 
				DB 27, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 27, 25, 26, 91, 162, 28, 163, 16, 16, 16, 16, 16, 16 
				DB 24, 22, 23, 28, 25, 26, 26, 28, 29, 29, 29, 29, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 25, 26, 27 
				DB 28, 22, 25, 23, 16, 16, 16, 16, 163, 27, 24, 27, 89, 26, 26, 26, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 25, 26, 25, 25, 26, 164, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 162, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 20, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 26, 29, 29, 28, 25, 21, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 22 
				DB 24, 24, 24, 24, 28, 28, 28, 28, 28, 29, 29, 29, 26, 20, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 27, 27, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 27, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 138, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 115, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 28, 25, 18, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 21, 21, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 27, 27, 27, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 28, 28, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 138, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 6, 42, 115 
				DB 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 89, 26, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 17, 16, 16, 16, 17, 21, 24, 26, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28, 24, 24, 22, 20, 19, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26, 25, 26, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 28, 27, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25 
				DB 25, 25, 25, 25, 25, 25, 25, 26, 28, 29, 29, 29, 29, 29, 29, 29, 29, 138, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 25, 20, 23, 21, 23, 21, 25, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 28, 28, 25, 23, 20, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26, 21, 23, 21, 24, 161, 163, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 27, 25 
				DB 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 28, 29, 29, 29, 29, 29, 29, 236, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 24, 24, 91, 91, 162, 91, 91 
				DB 24, 21, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 22, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 28, 24, 24, 27, 29, 29, 29, 29, 29, 29, 27, 24, 24, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 21, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 23, 90, 90, 163, 90, 90, 26, 25, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 27, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 28, 29, 29 
				DB 29, 29, 29, 210, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 115, 42 
				DB 6, 42, 42, 42, 115, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 89, 91, 91, 91, 162, 91, 91, 91, 89, 91, 91, 91, 90, 90, 90, 91, 91, 91, 91, 91, 91, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 19, 25, 25, 21, 20, 28, 29, 29, 28, 19, 21, 25, 25, 20, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 161, 163, 25, 163, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 25, 25, 25, 25, 25, 25, 164, 163, 161, 161, 161, 24, 25, 25, 25, 24, 163 
				DB 161, 138, 164, 138, 161, 24, 25, 25, 25, 25, 26, 29, 29, 29, 29, 29, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 115, 6, 42, 42, 42, 42, 6, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 233, 234, 210, 16, 90, 91, 91, 91, 91, 89, 66, 66, 89, 91, 91, 91, 91, 91, 162, 91, 162, 90, 162, 91, 91, 91, 91, 90, 65, 65, 65, 66, 91, 91, 91, 91, 91 
				DB 90, 210, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 24, 29, 29, 29, 26, 21, 22, 22, 21, 26, 29, 29, 29, 24 
				DB 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 163, 90, 90, 163, 25, 90, 27, 25, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 28, 25, 25, 25, 25 
				DB 164, 161, 24, 25, 25, 25, 25, 164, 164, 25, 164, 163, 25, 25, 25, 25, 25, 25, 164, 25, 25, 25, 25, 26, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 114, 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 210, 234, 234, 234, 234, 234, 90, 91, 91, 91, 89, 65, 65, 65, 65, 89, 91, 91, 24, 89, 91, 91, 162, 91, 91, 27 
				DB 24, 91, 91, 66, 65, 65, 65, 65, 89, 91, 91, 91, 91, 27, 234, 234, 234, 234, 210, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 28, 22, 23, 23, 24, 28, 29, 29, 29, 26, 28 
				DB 29, 29, 29, 22, 21, 21, 21, 21, 22, 29, 29, 29, 28, 26, 29, 29, 29, 28, 24, 23, 23, 23, 28, 29, 29, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 161, 25, 25, 163, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 25, 29, 29, 29, 29, 28, 25, 25, 25, 25, 24, 25, 25, 25, 25, 25, 25, 25, 24, 164, 163, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 29, 29, 29 
				DB 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 114, 16, 6, 42 
				DB 42, 42, 42, 42, 42, 6, 6, 6, 6, 6, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 26, 91, 91, 91, 66, 65, 65 
				DB 65, 65, 66, 91, 91, 91, 91, 24, 91, 162, 90, 24, 91, 90, 91, 91, 65, 65, 65, 65, 65, 89, 91, 91, 91, 90, 235, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 29 
				DB 29, 29, 29, 29, 29, 29, 26, 23, 23, 23, 24, 27, 29, 29, 29, 27, 24, 22, 21, 21, 22, 23, 27, 29, 29, 29, 27, 24, 23, 23, 23, 26, 29, 29, 29, 29, 29, 29, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 21, 20, 27, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 164, 161, 25, 137, 24, 25, 236, 25 
				DB 24, 25, 25, 25, 25, 25, 25, 25, 25, 28, 29, 29, 29, 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 17, 16, 17, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234 
				DB 234, 234, 234, 234, 234, 234, 20, 91, 91, 91, 66, 65, 65, 65, 65, 66, 91, 91, 91, 91, 27, 91, 162, 91, 89, 91, 91, 91, 91, 66, 65, 65, 65, 65, 90, 91, 91, 91, 23, 234 
				DB 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 24, 22, 27, 28, 29, 28, 29, 20, 20, 29, 28, 29, 28, 28, 23, 24 
				DB 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 163, 17, 16, 16, 16, 20, 25, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 27, 25, 25, 25 
				DB 25, 25, 25, 25, 236, 25, 25, 25, 235, 25, 25, 24, 24, 161, 25, 25, 25, 25, 25, 25, 26, 28, 29, 29, 29, 29, 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 90, 91, 91, 90, 65, 65, 65, 65, 90, 91, 91, 91, 91, 26, 26, 235, 26, 27, 91, 91 
				DB 91, 91, 90, 66, 65, 65, 89, 91, 91, 91, 91, 236, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 26, 25, 25, 25, 24, 22, 26 
				DB 24, 29, 29, 29, 21, 21, 29, 29, 29, 24, 26, 22, 24, 25, 25, 25, 27, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 25, 18, 16, 16, 16, 16, 16, 16, 16, 20, 27, 90, 90, 90, 90, 90, 89, 164, 164, 89, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 27, 25, 25, 25, 25, 25, 24, 164, 138, 25, 235, 25, 25, 137, 25, 25, 25, 25, 25, 25, 26, 28, 29, 29, 29, 29, 29, 29, 29 
				DB 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 26, 91, 91, 91, 90, 89, 89 
				DB 90, 91, 91, 90, 21, 17, 16, 16, 16, 16, 16, 17, 162, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 26, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 29 
				DB 29, 28, 23, 22, 22, 24, 25, 25, 25, 26, 29, 29, 27, 29, 29, 21, 29, 21, 21, 29, 22, 29, 29, 28, 28, 29, 26, 25, 25, 25, 23, 22, 22, 23, 28, 29, 29, 29, 16, 16 
				DB 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 163, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 26, 90, 90, 90, 90, 24, 186, 186, 139, 90, 90, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 25, 25, 25, 25, 25, 25, 161, 16, 18, 24, 25, 25, 25 
				DB 25, 25, 25, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234 
				DB 234, 234, 234, 234, 234, 234, 163, 91, 91, 91, 91, 91, 91, 91, 91, 90, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 209, 90, 91, 91, 91, 91, 91, 91, 91, 91, 23, 234, 234, 234 
				DB 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 29, 29, 23, 29, 29, 29, 29, 29, 29, 29, 27, 22, 22, 27, 29, 29, 29, 29, 23, 23, 29, 29, 29, 29, 28, 23, 22, 26 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 23, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17 
				DB 90, 90, 90, 90, 137, 186, 186, 186, 66, 89, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 26, 25, 25, 25, 25, 138, 16, 16, 16, 18, 24, 25, 25, 25, 25, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 42, 42, 42, 42, 42, 41, 42 
				DB 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 236, 91, 91, 91, 91, 91, 91, 91, 91, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 26, 91, 91, 91, 91, 91, 91, 91, 91, 20, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 25, 21, 21, 21, 19, 24, 29, 29, 24, 22, 24, 29, 29, 29, 29 
				DB 29, 29, 29, 23, 23, 29, 29, 29, 29, 29, 29, 29, 25, 23, 24, 28, 29, 21, 19, 20, 23, 23, 26, 29, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 20 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 90, 90, 26, 163, 186, 186, 186, 186, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 25, 25, 25, 163, 16, 16, 16, 16, 16, 234, 25, 25, 25, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 41, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 6, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 41, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 27, 91, 91, 91, 91, 91, 91 
				DB 91, 90, 232, 16, 16, 16, 16, 16, 16, 16, 16, 16, 232, 91, 91, 91, 91, 91, 91, 91, 91, 28, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 21, 21, 21 
				DB 21, 22, 25, 28, 27, 23, 27, 29, 29, 29, 29, 29, 29, 29, 24, 23, 21, 21, 23, 24, 29, 29, 29, 29, 29, 29, 29, 27, 23, 25, 27, 24, 21, 21, 21, 21, 21, 16, 16, 16 
				DB 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 27, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 164, 210, 186, 186, 186, 186, 186, 186, 186, 26, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 25, 25, 137, 16, 16, 16, 16, 16, 18, 25, 25, 26 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 114 
				DB 18, 187, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 115, 18, 187, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234 
				DB 234, 234, 234, 234, 234, 234, 24, 91, 91, 91, 91, 91, 91, 91, 91, 90, 23, 18, 16, 16, 16, 16, 16, 232, 24, 91, 91, 91, 91, 91, 91, 91, 91, 91, 26, 234, 234, 234, 234, 234 
				DB 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 23, 21, 23, 23, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 21, 21, 21, 21, 21, 21, 21, 21, 26, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 21, 29, 22, 21, 21, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 23, 209, 16, 16, 16, 16, 16, 18, 21, 25, 137, 186, 186 
				DB 186, 186, 186, 186, 186, 186, 186, 26, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 164, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 26, 25, 24, 210, 17, 16, 16, 18, 164, 25, 25, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 114, 138, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 114, 137, 6, 42, 42, 6, 42, 42, 42, 42, 42 
				DB 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 162, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 90, 26, 26, 26, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 23, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 29, 21, 21, 21, 21, 22, 24, 29, 29, 29, 29, 29, 29, 29, 21, 21 
				DB 21, 21, 21, 21, 21, 21, 21, 21, 29, 29, 29, 29, 29, 29, 29, 24, 22, 21, 21, 21, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 26, 25, 25, 90, 89, 164, 210, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186 
				DB 186, 23, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 25, 25, 25, 25, 25, 25, 25, 25, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 210, 186 
				DB 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 6, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 6, 6, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 236, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 20, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 29, 21, 21, 21 
				DB 21, 21, 21, 28, 29, 29, 29, 29, 29, 29, 29, 23, 21, 21, 21, 21, 21, 21, 21, 21, 23, 29, 29, 29, 29, 29, 29, 29, 28, 22, 16, 18, 20, 24, 29, 29, 16, 16, 16, 16 
				DB 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 25, 139, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 139, 90, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 163, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 25, 25, 25, 25, 25, 25, 28, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234 
				DB 234, 234, 234, 234, 234, 234, 28, 91, 91, 91, 91, 90, 12, 89, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 65, 91, 91, 91, 91, 91, 91, 90, 234, 234, 234, 234, 234, 234, 234 
				DB 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 21, 21, 21, 21, 22, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 22, 21, 21, 21, 21, 22, 26, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 27, 20, 16, 16, 21, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 163, 186, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 25, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 163, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 28, 27, 27, 27, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 42, 42, 42, 42, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 26, 91, 91, 91, 91, 12, 41, 12, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 64, 41, 64 
				DB 91, 91, 91, 91, 91, 27, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 17, 21, 21, 23, 29, 29, 29, 29, 29, 29, 29, 27, 27, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 26, 29, 29, 29, 29, 29, 29, 29, 25, 21, 21, 21, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 164, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186 
				DB 186, 186, 186, 26, 29, 29, 29, 29, 29, 27, 23, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 23, 24, 29, 29, 29, 29, 29, 28, 210, 186, 186, 186, 186, 186 
				DB 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 233, 234, 234, 234, 234, 234, 234, 234, 234, 234, 24, 91, 91, 91, 66, 41, 41, 41 
				DB 65, 91, 91, 91, 91, 91, 91, 91, 91, 89, 41, 41, 41, 89, 91, 91, 91, 91, 25, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 25, 29, 23, 29 
				DB 29, 29, 29, 29, 29, 29, 27, 17, 16, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 18, 16, 25, 29, 29, 29, 29, 29, 29, 29, 29, 22, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 210, 90, 90, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 210, 28, 29, 29, 29, 29, 17, 16, 16, 24, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 18, 16 
				DB 16, 23, 29, 29, 29, 29, 162, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234 
				DB 234, 234, 234, 234, 234, 162, 91, 91, 91, 89, 12, 66, 12, 89, 91, 91, 91, 91, 91, 91, 91, 91, 66, 41, 12, 41, 65, 91, 91, 91, 91, 163, 234, 234, 234, 234, 234, 234, 234, 234 
				DB 234, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 16, 16, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 17, 16, 25, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 162, 29, 29, 29, 26, 16, 16, 16, 21, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 16, 16, 16, 20, 29, 29, 29, 26, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 236, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 27, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 28, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 26, 186, 186, 186, 186, 186, 186, 186, 17, 161, 17, 186, 186, 186, 186, 186, 186, 90, 89, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 26, 29, 29, 29, 20, 16, 17, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 21, 16, 16, 25, 29, 29, 28, 211, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 42, 42, 42, 42, 41, 41, 42, 42, 42, 42, 42, 42, 42 
				DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 26, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 26, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 90, 90, 90, 90, 90, 27, 26, 26, 26, 90, 90, 89, 186, 186, 186, 186, 186, 186, 17, 16, 16, 16, 17, 186, 186, 186, 186, 186, 90, 16, 16, 90, 90, 90, 90, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 137, 29, 29, 29, 29, 26, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 27 
				DB 29, 29, 29, 24, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41 
				DB 42, 42, 42, 42, 41, 41, 42, 42, 42, 42, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234 
				DB 234, 234, 234, 234, 234, 162, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 23, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 26, 25, 90, 27, 90, 90, 90, 163, 186, 186, 186, 186, 186, 186, 16, 16, 16, 17, 186, 186 
				DB 186, 186, 137, 90, 16, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 25, 28, 25, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 25, 28, 210, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 42, 42, 42, 42, 41, 41, 42, 42, 42, 42, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 234, 27, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91 
				DB 91, 27, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 16, 186, 186, 186, 164, 16, 16, 16, 90, 90, 90, 90, 27, 23, 26, 26, 90, 90, 90 
				DB 26, 186, 186, 186, 186, 186, 186, 17, 16, 17, 186, 186, 186, 186, 186, 164, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 211, 29, 25, 23, 25, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 27, 23, 23, 27, 29, 24, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 43, 90, 90, 90, 66, 42, 42, 42, 42, 42, 41, 41, 42, 42, 42, 41, 41, 42, 42, 42, 42, 41, 42, 42, 42 
				DB 42, 42, 66, 90, 90, 90, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 20, 90, 91, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 161, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16, 16, 186, 186, 186, 25, 90 
				DB 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 210, 186, 186, 186, 186, 186, 186, 17, 186, 186, 186, 186, 186, 137, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 25, 29, 29, 26, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 28, 210, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 0, 0, 0, 66, 42, 42, 16, 42, 42, 42, 42 
				DB 42, 42, 42, 41, 41, 42, 42, 42, 42, 41, 42, 42, 42, 42, 42, 66, 0, 0, 0, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234 
				DB 234, 234, 234, 234, 234, 234, 161, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 23, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 29, 29, 29, 29, 29, 29, 22, 29, 29, 29, 28, 29, 29, 29, 29, 23, 24, 29, 29, 29, 24, 29, 29, 29, 24, 27, 29, 29, 29, 29 
				DB 29, 29, 24, 22, 29, 29, 16, 16, 186, 186, 186, 25, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 138, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 137 
				DB 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 211, 29, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 24, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 42, 42, 0, 0, 30, 43, 42, 41, 16, 16, 16, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 42, 42, 43, 30, 0, 0, 42, 42, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 23, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 23, 234 
				DB 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 21, 22, 29, 29, 29, 29, 24, 21, 26, 29, 29, 21, 26, 29, 29, 26, 21, 21 
				DB 29, 29, 26, 21, 26, 29, 29, 21, 22, 29, 29, 29, 29, 29, 22, 21, 21, 22, 29, 16, 16, 186, 186, 186, 212, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 164, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 137, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 28, 210, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 90, 0, 66, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 42, 42, 66, 0, 90, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 234, 234, 23, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 23, 234, 234, 234, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 29, 25, 21, 21, 22, 29, 29 
				DB 29, 21, 21, 23, 29, 29, 21, 22, 29, 29, 22, 21, 21, 29, 29, 23, 21, 23, 29, 26, 21, 21, 29, 29, 29, 29, 22, 21, 21, 21, 29, 29, 16, 16, 186, 186, 186, 186, 89, 90 
				DB 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 24, 186, 186, 186, 186, 186, 186, 186, 186, 186, 137, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 138, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 25, 186 
				DB 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 66, 91, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 91, 66, 42, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 210, 234, 234, 234, 234, 234, 234, 234, 25, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 26, 234, 234, 234, 234, 234, 234, 234, 233, 16, 16, 16, 16, 16, 16, 41, 41, 41 
				DB 16, 16, 16, 16, 16, 16, 29, 23, 21, 21, 21, 22, 29, 22, 21, 21, 24, 29, 26, 21, 21, 29, 29, 21, 21, 21, 26, 29, 22, 21, 23, 29, 26, 21, 21, 29, 29, 29, 29, 21 
				DB 21, 21, 21, 29, 29, 16, 16, 16, 186, 186, 186, 25, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 210, 186, 186, 186, 186, 186, 186, 163, 25, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 28, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 211, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 42, 43, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 65, 43, 42, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 234, 236, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 20, 234, 234, 234, 234 
				DB 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 28, 24, 21, 21, 21, 28, 29, 22, 21, 20, 22, 29, 26, 21, 21, 26, 29, 21, 21, 21, 23 
				DB 29, 21, 21, 22, 29, 23, 21, 21, 29, 29, 29, 29, 28, 21, 21, 26, 29, 29, 16, 16, 16, 16, 186, 186, 24, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90 
				DB 25, 186, 186, 186, 186, 210, 27, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 23, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 234, 234, 234, 234, 234, 235, 91, 91, 91, 91, 91 
				DB 91, 91, 91, 91, 91, 91, 91, 91, 236, 234, 234, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 29, 29, 24, 23, 29, 29, 28, 21 
				DB 21, 20, 22, 29, 24, 21, 21, 24, 29, 21, 21, 21, 23, 29, 21, 21, 21, 29, 23, 21, 21, 29, 29, 16, 28, 28, 29, 29, 29, 29, 28, 16, 16, 16, 16, 16, 16, 163, 90, 90 
				DB 90, 90, 90, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 26, 139, 211, 137, 27, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 210, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 163, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 234, 234, 234, 234, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 161, 234, 234, 234, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 28, 29, 29, 29, 29, 28, 29, 16, 21, 19, 23, 29, 23, 21, 21, 23, 26, 21, 21, 21, 23, 26, 21, 21, 21, 29, 26, 21, 22, 16, 16, 16, 16, 29, 29 
				DB 28, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 25, 29, 29, 29, 29, 29, 29, 29 
				DB 29, 29, 29, 29, 29, 29, 29, 29, 28, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 91, 91, 91, 91, 91, 91, 91, 91, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 28, 24, 21, 21, 26, 26, 21, 21, 21, 26, 28 
				DB 21, 21, 23, 29, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29, 29, 29, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 90, 90, 90 
				DB 90, 90, 90, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 186, 186 
				DB 186, 186, 186, 186, 186, 138, 26, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 26, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 90, 90, 90, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 186, 186, 186, 16, 16, 186, 23, 24, 26, 25, 26, 26, 28, 25, 25, 25, 25, 24, 163, 161, 186, 186, 186, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 31, 31, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31 
				DB 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 16, 31, 31, 16, 16, 16, 16, 31, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16 
				DB 16, 31, 31, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16 
				DB 16, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 31, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41 
				DB 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31 
				DB 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31 
				DB 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 41 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16 
				DB 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 31, 31, 16, 31, 31, 16, 16, 31, 31, 16, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16 
				DB 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16 
				DB 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 31, 31, 16, 31, 31, 31 
				DB 16, 31, 31, 16, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31 
				DB 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16 
				DB 16, 16, 31, 31, 31, 31, 16, 16, 31, 31, 31, 31, 31, 31, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 41, 41, 41, 41, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31 
				DB 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16, 16 
				DB 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16 
				DB 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 16, 31, 31, 16, 16, 31, 31 
				DB 16, 31, 16, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31 
				DB 31, 31, 31, 31, 16, 16, 16, 31, 16, 16, 31, 31, 16, 31, 31, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31 
				DB 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 31, 31, 31, 31, 31, 16, 16, 31, 31, 16, 31, 31, 16, 31, 31, 16, 16, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 31 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 31, 16 
				DB 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 16, 16, 16, 31, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31 
				DB 31, 31, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
				DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
â€‹
menu_H  DW 60
menu_W	DW 48

menu_img			 DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43 
					DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66, 66, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 43, 6, 211, 42, 43, 42, 212, 212, 138, 140, 212, 42, 65, 212, 140, 140, 138, 138, 212, 212, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 6, 18, 42, 43, 43, 139, 18, 140, 140, 18, 140, 140, 18, 140, 43, 43, 43, 138, 18, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 6, 18, 42, 43, 43, 140, 18, 42, 140, 211, 140, 139, 210, 140, 66, 66, 66 
					DB 139, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 6, 18, 42, 43, 43, 140, 18, 42, 43 
					DB 140, 210, 209, 140, 66, 43, 140, 140, 211, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 6 
					DB 18, 42, 43, 43, 140, 18, 42, 43, 140, 209, 209, 140, 66, 66, 140, 140, 212, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 43, 43, 6, 18, 42, 43, 43, 140, 18, 42, 140, 209, 140, 140, 18, 140, 66, 66, 14, 139, 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 6, 138, 18, 139, 6, 42, 138, 18, 140, 140, 18, 140, 65, 18, 140, 140, 140, 140, 138, 18, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 140, 140, 140, 140, 6, 42, 140, 140, 140, 65, 140, 43, 43, 140, 65, 140, 140, 140 
					DB 140, 140, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66 
					DB 66, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 43, 43, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66, 66, 66, 66, 66, 66, 66, 14, 66, 66, 66, 43, 42, 42, 16 
					DB 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 66, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
					DB 43, 43, 43, 43, 66, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66 
					DB 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 212, 6, 43, 42, 212, 140, 43, 138, 139 
					DB 140, 212, 43, 140, 212, 140, 43, 212, 138, 212, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 18 
					DB 139, 43, 42, 18, 139, 43, 210, 212, 140, 18, 43, 140, 18, 140, 140, 138, 65, 138, 137, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 43, 42, 18, 139, 43, 42, 18, 212, 140, 209, 212, 140, 18, 43, 140, 18, 140, 66, 66, 66, 139, 211, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 18, 139, 43, 42, 18, 212, 139, 18, 212, 140, 18, 65, 140, 18, 140, 66, 14, 66, 139, 211, 66, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 18, 139, 43, 42, 18, 139, 43, 210, 212, 140, 18, 212, 212, 18, 140, 66, 14 
					DB 66, 139, 211, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 18, 139, 43, 42, 18, 139, 43, 210, 212 
					DB 140, 18, 65, 140, 18, 140, 65, 66, 66, 139, 211, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 139, 18 
					DB 212, 6, 42, 212, 212, 140, 211, 139, 140, 18, 43, 140, 18, 140, 140, 212, 140, 212, 139, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 6, 139, 139, 139, 140, 42, 42, 140, 140, 140, 43, 42, 140, 43, 65, 140, 65, 66, 140, 140, 140, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 43, 42, 42, 42, 42, 43, 43, 43, 43, 43, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 16, 16, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 16 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43 
					DB 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43 
					DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66, 14, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43 
					DB 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 66, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 211, 18, 43, 42, 210, 212, 42, 115, 210, 6, 17, 140, 43, 18, 139, 43, 43, 209, 139, 66, 66, 140, 209, 212, 209, 65, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 211, 18, 43, 42, 210, 211, 42, 137, 209, 6, 17, 140, 43, 17, 138, 43, 43, 209, 138, 66, 43, 211, 138, 66, 139, 140, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 211, 18, 43, 42, 6, 18, 115, 210, 209, 6, 17, 212, 138, 17, 138, 43, 43, 209, 138, 66 
					DB 43, 210, 138, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 66, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 211, 18, 43, 42, 115, 210, 6, 211, 209, 6, 17, 139 
					DB 140, 17, 138, 43, 43, 209, 138, 66, 66, 140, 210, 138, 212, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 211, 18, 43, 42 
					DB 210, 211, 42, 137, 209, 6, 17, 140, 43, 17, 138, 43, 43, 209, 138, 14, 14, 14, 65, 65, 211, 138, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 211, 18, 43, 42, 210, 211, 42, 137, 209, 6, 17, 140, 43, 17, 138, 43, 43, 209, 138, 14, 66, 140, 65, 14, 212, 212, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 115, 209, 18, 115, 6, 6, 209, 115, 210, 210, 42, 212, 212, 139, 210, 140, 140, 139, 209, 210, 139, 66, 140, 210, 140, 211, 140, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 6, 6, 6, 6, 42, 43, 6, 6, 6, 6, 43, 42, 140, 140, 140, 43, 65, 140, 140, 140, 140 
					DB 66, 66, 140, 140, 140, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 66, 66, 66, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 66, 14 
					DB 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 43, 42, 42, 16, 42, 42, 42, 42, 42, 42, 42 
					DB 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 16 
 

options_h			DW 60
options_w			DW 16
options_img			DB 16, 16, 16, 16, 6, 6, 42, 42, 42, 42, 6, 6, 40, 16, 16, 16, 16, 16, 6, 6, 42, 42, 43, 43, 43, 43, 42, 42, 6, 6, 16, 16, 16, 40, 6, 42, 43, 43, 43, 43 
					DB 43, 43, 43, 43, 42, 42, 6, 16, 16, 6, 42, 43, 43, 43, 43, 44, 44, 43, 43, 43, 43, 42, 6, 16, 6, 42, 43, 43, 43, 44, 44, 14, 14, 14, 44, 43, 43, 43, 42, 6 
					DB 6, 42, 6, 187, 115, 115, 43, 210, 115, 115, 43, 115, 115, 17, 6, 6, 6, 42, 43, 43, 43, 17, 140, 139, 14, 43, 14, 44, 43, 17, 6, 6, 6, 43, 43, 43, 43, 17, 43, 211 
					DB 139, 26, 14, 140, 115, 17, 6, 6, 6, 42, 43, 43, 43, 17, 14, 14, 66, 17, 14, 14, 43, 17, 6, 6, 6, 42, 6, 115, 6, 209, 140, 139, 140, 209, 43, 43, 43, 17, 6, 6 
					DB 6, 42, 43, 140, 140, 43, 14, 140, 140, 43, 43, 140, 140, 6, 42, 6, 40, 6, 43, 14, 14, 14, 14, 14, 14, 14, 14, 14, 67, 43, 42, 6, 16, 6, 42, 43, 14, 14, 14, 14 
					DB 14, 14, 67, 91, 14, 42, 6, 16, 16, 16, 6, 42, 43, 14, 14, 14, 67, 92, 91, 43, 42, 6, 16, 16, 16, 16, 16, 6, 6, 42, 43, 43, 43, 43, 42, 6, 6, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 6, 6, 6, 6, 6, 6, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6 
					DB 6, 6, 6, 6, 16, 16, 16, 16, 16, 16, 16, 6, 42, 42, 42, 43, 43, 42, 42, 42, 6, 40, 16, 16, 16, 16, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 40, 16 
					DB 16, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 16, 6, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 43, 43, 43, 42, 6, 6, 42, 43, 43, 115, 115, 212, 17 
					DB 14, 14, 14, 211, 116, 43, 42, 6, 6, 42, 43, 43, 44, 14, 212, 140, 14, 14, 14, 211, 116, 43, 43, 6, 6, 43, 43, 43, 43, 212, 140, 14, 14, 140, 140, 18, 116, 43, 43, 6 
					DB 6, 43, 43, 43, 212, 140, 14, 14, 14, 43, 6, 209, 116, 43, 43, 6, 6, 42, 43, 43, 18, 140, 43, 140, 14, 14, 14, 211, 116, 43, 43, 6, 6, 42, 43, 43, 140, 212, 212, 140 
					DB 6, 115, 115, 209, 140, 43, 42, 6, 6, 42, 43, 14, 14, 14, 14, 14, 14, 14, 14, 14, 67, 43, 42, 6, 16, 6, 42, 14, 14, 14, 14, 14, 14, 14, 14, 67, 67, 42, 6, 16 
					DB 16, 16, 6, 42, 14, 14, 14, 14, 67, 67, 0, 67, 43, 6, 40, 16, 16, 16, 40, 6, 42, 43, 43, 14, 67, 67, 43, 42, 6, 40, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6 
					DB 6, 6, 6, 6, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16 
					DB 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6, 6, 6, 6, 6, 16, 16, 16, 16 
					DB 16, 16, 40, 6, 42, 42, 43, 43, 43, 43, 42, 42, 6, 40, 16, 16, 16, 40, 6, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 6, 6, 16, 16, 6, 42, 43, 43, 43, 43, 43 
					DB 43, 43, 43, 43, 43, 42, 6, 16, 6, 42, 43, 43, 43, 44, 44, 14, 14, 44, 44, 43, 43, 43, 42, 6, 6, 42, 43, 43, 43, 18, 209, 43, 14, 14, 6, 17, 43, 43, 42, 6 
					DB 6, 42, 43, 43, 44, 212, 139, 14, 14, 14, 6, 17, 43, 43, 43, 6, 6, 43, 43, 43, 44, 212, 139, 14, 14, 140, 139, 17, 43, 43, 43, 6, 6, 43, 43, 43, 44, 212, 139, 14 
					DB 14, 140, 140, 17, 43, 43, 43, 6, 6, 42, 43, 43, 44, 212, 212, 14, 14, 14, 6, 17, 43, 43, 43, 6, 6, 42, 43, 14, 14, 115, 115, 43, 139, 115, 212, 18, 14, 43, 42, 6 
					DB 40, 6, 43, 14, 14, 14, 14, 14, 14, 14, 14, 14, 67, 43, 42, 6, 16, 6, 42, 43, 14, 14, 14, 14, 14, 14, 67, 91, 14, 42, 6, 16, 16, 16, 6, 42, 43, 14, 14, 14 
					DB 67, 91, 91, 14, 42, 6, 16, 16, 16, 16, 16, 6, 6, 42, 43, 14, 14, 14, 42, 42, 6, 16, 16, 16, 16, 16, 16, 16, 16, 6, 6, 6, 6, 6, 6, 40, 16, 16, 16, 16 
;---------------------------------------END OF MAIN MENU DATA ----------------------------------------
.CODE
MAIN PROC FAR
	                       MOV  AX,@data
	                       MOV  DS,AX
	                       CALL MAINMENU
	                       CALL STARTINGSCREEN
MAIN ENDP
;-------------------------------------MAIN MENU PROCEDURES----------------------------------------------
STARTINGSCREEN proc

	                       CALL SHOWNAMES
	                       CALL OPTIONSMENU
	                       RET
STARTINGSCREEN ENDP
MAINMENU PROC
	STARTMENU:     MOV  AH,0
	               MOV  AL,3
	               INT  10H
	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 25
	               MOV  DH , 5
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET MSG1
	               MOV  AH,9
	               INT  21H
	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 20
	               MOV  DH , 6
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET MSG2
	               MOV  AH,9
	               INT  21H
	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 25
	               MOV  DH , 7
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               CMP  ISFIRSTPLAYER , 1
	               JZ   PLAYERONE
	               JMP  PLAYERTWO

	CONT:          MOV  AH,9
	               INT  21H

	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 25
	               MOV  DH , 9
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET MSG4
	               MOV  AH,9
	               INT  21H
	;;;;;;;;;;;;;;;;;;;;;;
	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 25
	               MOV  DH , 11
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET MSG5
	               MOV  AH,9
	               INT  21H
	;; MOVING CURSOR TO NEEDED POSITION
	               MOV  DL , 3
	               MOV  DH , 19
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET MSG6
	               MOV  AH,9
	               INT  21H
				   CMP ISVALID , 0
				   JZ INVALIDMSG
	;; MOVING CURSOR TO NEEDED POSITION
	 TAKENAME:              MOV  DL , 32
	               MOV  DH , 9
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Read name
	      CMP  ISFIRSTPLAYER , 1
	               JZ   PLAYERONEstore
	               JMP  PLAYERTWOstore
	CONT2:         MOV  AH,0Ah
	               INT  21H
				   CMP  ISFIRSTPLAYER , 1
				   JZ VALIDATEPLAYERONE
				   JMP VALIDATEPLAYERTWO
	CONT3:         CMP  ISFIRSTPLAYER,1
	               JNZ  ENDPR
	               MOV  ISFIRSTPLAYER , 0
	               JMP  STARTMENU
	PLAYERONE:     MOV  DX, OFFSET MSG3
	               JMP  CONT
	PLAYERTWO:     MOV  DX,OFFSET MSG7
	               JMP  CONT
	PLAYERONEstore:MOV  DX , OFFSET FIRST_PLAYER_NAME
	               JMP  CONT2
	PLAYERTWOstore:MOV  DX , OFFSET SECOND_PLAYER_NAME
	               JMP  CONT2
	VALIDATEPLAYERONE:
					MOV SI , OFFSET FIRST_PLAYER_NAME+2
					MOV BL , [SI]
					CMP BL , 41H
					JGE SECONDCHECKN
					JMP INVALID
	SECONDCHECKN:	CMP BL ,5AH
					JLE VALIDNAME
	THIRDCHECK:     CMP BL , 61H
					JGE FORTHCHECK
					JMP INVALID
	FORTHCHECK:      CMP BL,7AH
					JLE VALIDNAME
					JMP INVALID

	VALIDNAME:     	MOV ISVALID,1
	JMP CONT3	

	INVALID:         MOV ISVALID,0
	JMP STARTMENU
	INVALIDMSG:   MOV  DL , 5
	               MOV  DH , 21
	               MOV  AH,2
	               INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	               MOV  DX, OFFSET ERRMSG
	               MOV  AH,9
	               INT  21H	
				   JMP  TAKENAME
	ENDPR:        MOV  ISFIRSTPLAYER , 1
	 RET
	 
	VALIDATEPLAYERTWO:
					MOV SI , OFFSET SECOND_PLAYER_NAME+2
					MOV BL , [SI]
					CMP BL , 41H
					JGE SECONDCHECKT
					JMP INVALID
	SECONDCHECKT:	CMP BL ,5AH
					JLE VALIDNAME
	THIRDCHECKT:     CMP BL , 61H
					JGE FORTHCHECKT
					JMP INVALID
	FORTHCHECKT:      CMP BL,7AH
					JLE VALIDNAME
					JMP INVALID
MAINMENU ENDP
;;------------------DISPLAY THE NAME OF ENTERED USERS-------------



SHOWNAMES PROC
	                       MOV  AH,0
	                       MOV  AL,3
	                       INT  10H
	;; MOVING CURSOR TO NEEDED POSITION
	                       MOV  DL , 20
	                       MOV  DH , 10
	                       MOV  AH,2
	                       INT  10h
	                       MOV  DX, OFFSET MSG8
	                       MOV  AH,9
	                       INT  21H
	;; MOVING CURSOR TO NEEDED POSITION
	                       MOV  DL , 35
	                       MOV  DH , 10
	                       MOV  AH,2
	                       INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                       MOV  DX, OFFSET FIRST_PLAYER_NAME+2
	                       MOV  AH,9
	                       INT  21H
	                       MOV  DL , 20
	                       MOV  DH , 12
	                       MOV  AH,2
	                       INT  10h
	                       MOV  DX, OFFSET MSG9
	                       MOV  AH,9
	                       INT  21H
	;; MOVING CURSOR TO NEEDED POSITION
	                       MOV  DL , 35
	                       MOV  DH , 12
	                       MOV  AH,2
	                       INT  10h
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                       MOV  DX, OFFSET SECOND_PLAYER_NAME+2
	                       MOV  AH,9
	                       INT  21H
	;;DELAY THE SCREEN TO SHOW THE NAMES
	                       mov  di,00FFFH
	LOP12:                 MOV  CX,20000
	LOP22:                 LOOP LOP22
	                       DEC  DI
	                       JNZ  LOP12
	                       RET
SHOWNAMES ENDP
OPTIONSMENU PROC
	                       mov  al, 13h
	                       mov  ah, 0
	                       int  10h

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                       MOV  AH,0Bh
	                       MOV  CX, LOGO_W
	                       MOV  DX, 198
	                       mov  DI, offset LOGO_img
	                       jmp  Start
	Drawit:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	Start:                 
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawit
	                       mov  Cx, LOGO_W
	                       DEC  DX
						   cmp DX, 158
	                       Jnz  Drawit
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       		MOV  AH,0Bh
	                       MOV  CX, 211
	                       MOV  DX, Title_H
	                       mov  DI, offset Title_img
	                       jmp  Starttitle
	Drawtitle:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	Starttitle:                 
	                       inc  DI
	                       DEC  Cx
						   cmp CX, 109
	                       JNZ  Drawtitle
	                       mov  Cx, 211
	                       DEC  DX
						   cmp DX, 0
	                       
	                       Jnz  Drawtitle
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       		MOV  AH,0Bh
	                       MOV  CX, 286
	                       MOV  DX, 133
	                       mov  DI, offset PETS_img
	                       jmp  Startpets
	Drawpets:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	Startpets:                 
	                       inc  DI
	                       DEC  Cx
						   cmp CX, 33
	                       JNZ  Drawpets
	                       mov  Cx, 286
	                       DEC  DX
						   cmp DX, 55
	                       
	                       Jnz  Drawpets
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       		MOV  AH,0Bh
	                       MOV  CX, 198
	                       MOV  DX, 196
	                       mov  DI, offset menu_img
	                       jmp  Startbutton
	Drawbutton:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	Startbutton:                 
	                       inc  DI
	                       DEC  Cx
						   cmp CX, 150
	                       JNZ  Drawbutton
	                       mov  Cx, 198
	                       DEC  DX
						   cmp DX, 136
	                       
	                       Jnz  Drawbutton
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       		MOV  AH,0Bh
	                       MOV  CX, 136
	                       MOV  DX, 196
	                       mov  DI, offset options_img
	                       jmp  StartOptions
	DrawOptions:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	StartOptions:                 
	                       inc  DI
	                       DEC  Cx
						   cmp CX, 120
	                       JNZ  DrawOptions
	                       mov  Cx, 136
	                       DEC  DX
						   cmp DX, 136
	                       JZ   CHECKS
	                       Jmp  DrawOptions
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	CHECKS:                MOV  AH,1
	                       INT  16H
	                       JZ   CHECKS
	                       MOV  AH,0
	                       INT  16H
	                       CMP  AL ,1BH
	                       JZ   ESCAPE
	                       CMP  AH, 59
	                       JZ   STARTCHAT
	                       CMP  AH , 60
	                       JZ   STARTGAME
	                       JMP  CHECKS
	ESCAPE:                mov ah, 4ch
                          
                           CALL MAINMENU
	                       CALL STARTINGSCREEN
	                       RET
	STARTCHAT:             
	                       
	                       jmp  CHECKS

	STARTGAME:             
	;;DELAY THE SCREEN
	                       mov  di,00FFFH
	LOP12T:                MOV  CX,500
	LOP22T:                LOOP LOP22T
	                       DEC  DI
	                       JNZ  LOP12T
	                       CALL STARTTHEGAME
						   ret

OPTIONSMENU ENDP
;;----------------------DrawPlayersNames---------------------------------
DrawNames PROC
	push ax
	push dx 
	push bx
	push cx
	push SI
	push DI
	mov al, 0
	mov bl, 0
	mov dl,0h
    mov dh,2h
    mov bh,0
    mov ah,02h
    int 10h
	mov cx,0
	mov cl, FIRST_PLAYER_NAME[1]
	mov SI, offset FIRST_PLAYER_NAME+2
drawname1:
	mov al, [SI]
	mov bl, 03
	mov ah,0eh
	int 10h
	inc si
loop drawname1

	mov dl,30
    mov dh,2h
    mov bh,0
    mov ah,02h
    int 10h
	mov cx,0
	mov cl, SECOND_PLAYER_NAME[1]
	mov SI, offset SECOND_PLAYER_NAME+2
drawname2:
	mov al, [SI]
	mov bl, 03
	mov ah,0eh
	int 10h
	inc si
loop drawname2

	mov dl,12 ;column
	mov DI, offset cat_score+2
DrawINITSCORE:
    mov dh,1h ;row
    mov bh,0
    mov ah,02h
    int 10h
	mov cx,0
	mov cl, 3
	inc CurrentScore
drawzero:
	mov al, [di]
	cmp al, 3Ah
	jb notGreater
greaterTnine:
	mov al, 30h
	mov [DI], al
	dec DI
	mov al, 1h
	add [DI], al
	inc DI
notGreater:
	mov al, [DI]
	mov bl, 04h
	mov ah,0eh
	int 10h
	dec DI
	dec dl
	mov dh,1h ;row
    mov bh,0
    mov ah,02h
    int 10h
loop drawzero
mov dl , 29
mov DI, offset dog_score+2
cmp CurrentScore, 1
jz DrawINITSCORE
mov CurrentScore, 0

pop DI
pop SI
pop cx
pop bx
pop dx 
pop ax
ret
DrawNames ENDp

DRAW_SCORE_ICON PROC 

MOV  AH,0Bh
	                       MOV  CX, 114
	                       MOV  DX, 14
	                       mov  DI, offset COIN
	                       jmp  StartIconScore
	DrawIconScore:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	StartIconScore:                 
	                       inc  DI
	                       DEC  Cx
						   cmp cx, 106
	                       JNZ  DrawIconScore
	                       mov  Cx, 114
	                       DEC  DX
						   cmp DX, 6
	                       Jnz  DrawIconScore
	                       
						   MOV  CX, 210
	                       MOV  DX, 14
	                       mov  DI, offset COIN
	                       jmp  StartIconScore2
	DrawIconScore2:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       MOV  BH,00h
	                       INT  10h
	StartIconScore2:                 
	                       inc  DI
	                       DEC  Cx
						   cmp cx, 202
	                       JNZ  DrawIconScore2
	                       mov  Cx, 210
	                       DEC  DX
						   cmp DX, 6
	                       Jnz  DrawIconScore2

RET
DRAW_SCORE_ICON ENDP


;----------------------------------------GAME PROCEDURES----------------------------------------------

STARTTHEGAME PROC
	                       mov  ah,0
	                       mov  al,13h
	                       int  10h
	;;Draw Color Background

	;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                       call waitForNewVR
                           
	                       call DrawBackGround
                           
	; Drawing health bars
	                       mov  HealthBarPos, 'F'                 	; stands for first player's health bar
	                       call Draw_Health_Bar
                   
                    
	                       mov  HealthBarPos, 'S'                 	; stands for second player's health bar
	                       call Draw_Health_Bar
	                       inc  HealthBarDrawn                    	; to indicate that it has been drawn once
						
	                       
	                   
						   call DrawCatLogo
	                       call DrawDogLogo
						   call DrawNames
						   call DRAW_SCORE_ICON
						   mov  CurrentPowerUp, 0
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp
	                       call DrawHeart
						   
	                       mov  CurrentPowerUp, 1
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp2
	                       call DrawHeart2
						
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CatDrawing:            
	                       mov  BX , 0
	                       mov  xCoord , BX
	                       mov  yCoord , 115
	                       call DrawCat
	                    

	DogDrawing:            
	                       mov  BX , 285
	                       mov  DX  ,115
	                       mov  xd, BX
	                       mov  yd , DX
	                       call DrawDog
     
						   						  

					
	;call CharacterGravity

	                       call read_the_key

	ENDING:                
	                       RET
STARTTHEGAME ENDP

;;----------------------DRAW BACKGROUND AND THE STEPS--------------------
DrawBackGround proc
	                       MOV  CX ,0
	                       MOV  DX ,25
	                       MOV  AL,0Bh
	                       MOV  AH,0Ch
	FILL:                  INT  10h
	                       INC  CX
	                       CMP  CX,320
	                       JNZ  FILL
	                       INC  DX
	                       MOV  CX,0
	                       CMP  DX,140
	                       JNZ  FILL
	                       JMP  LINEDRAWING
	;;DRAW LINE BETWEEN GROUND AND SKY
	LINEDRAWING:           
	                       MOV  CX ,0
	                       MOV  DX ,140
	                       MOV  AL,02h
	                       MOV  AH,0Ch
	FILL3:                 INT  10h
	                       INC  CX
	                       CMP  CX,320
	                       JNZ  FILL3
	                       INC  DX
	                       MOV  CX,0
	                       CMP  DX,146
	                       JNZ  FILL3
	;Drawing Steps
	STEP1:                                                        	;first step on the left
	                       mov  dx, 106
	Start1:                mov  cx, 50
	                       mov  al, 6
	                       mov  ah, 0Ch
	StepDraw1:             int  10h
	                       inc  cx
	                       cmp  cx, 125
	                       jnz  StepDraw1
	                       DEC  dx
	                       cmp  dx, 102
	                       jnz  Start1
	STEP2:                                                        	;second step on the right
	                       mov  dx, 106
	Start2:                mov  cx, 200
	                       mov  al, 6
	                       mov  ah, 0Ch
	StepDraw2:             int  10h
	                       inc  cx
	                       cmp  cx, 275
	                       jnz  StepDraw2
	                       DEC  dx
	                       cmp  dx, 102
	                       jnz  Start2

	STEP3:                                                        	;Top Step
	                       mov  dx, 70
	Start3:                mov  cx, 115
	                       mov  al, 6
	                       mov  ah, 0Ch
	StepDraw3:             int  10h
	                       inc  cx
	                       cmp  cx, 210
	                       jnz  StepDraw3
	                       DEC  dx
	                       cmp  dx, 66
	                       jnz  Start3
	;;;Draw Bottom of the image
	SCREENBOTTOM:          
	                       MOV  CX ,0
	                       MOV  DX ,146
	                       MOV  AL,06h
	                       MOV  AH,0Ch
	FILL2:                 INT  10h
	                       INC  CX
	                       CMP  CX,320
	                       JNZ  FILL2
	                       JMP  CHANGECOLOR
	CONTINUE:              
	                       INC  DX
	                       MOV  CX,0
	                       CMP  DX,165
	                       JNZ  FILL2
	                       ret
	CHANGECOLOR:           
	                       CMP  AL,06h
	                       JZ   COLORBROWN
	                       JMP  COLORBLACK
	COLORBROWN:            
	                       MOV  AL,06h
	                       JMP  CONTINUE
	COLORBLACK:            
	                       MOV  AL,05
	                       JMP  CONTINUE
	                       JMP  FILL2
	RET
DrawBackGround Endp

;---------------------UPDATE BACKGROUNG AT EACH MOVEMENT AND HEALTH BARS-----------------------

UpdatedBackground proc
	                       MOV  CX,0
	                       MOV  DX ,24
	                       MOV  AL,0Bh
	                       MOV  AH,0Ch
	FILLUpdatedBG:         INT  10h
	                       INC  CX
	                       CMP  CX,320
	                       JNZ  FILLUpdatedBG
	                       INC  DX
	                       MOV  CX,0
	                       CMP  DX,140
	                       JNZ  FILLUpdatedBG

	                       MOV  CX,72
	                       MOV  DX ,0
	                       MOV  AL,0Bh
	                       MOV  AH,0Ch
	FILLUpdatedBG2:        INT  10h
	                       INC  CX
	                       CMP  CX,250
	                       JNZ  FILLUpdatedBG2
	                       INC  DX
	                       MOV  CX,72
	                       CMP  DX,140
	                       JNZ  FILLUpdatedBG2

	                       jmp  LINEDRAWING
						   RET
UpdatedBackground endp
;-------------------------------------DRAWING CHARACTERS PROCEDURES----------------------------------------------
DrawCat proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, cat_W
	                       MOV  DX, cat_H
	                       mov  DI, offset cat_img
	                       jmp  Startcat
	Drawct:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   Startcat
	                       MOV  BH,00h
	                       add  cx,xCoord
	                       add  dx,yCoord
	                       INT  10h
	                       sub  cx , xCoord
	                       sub  dx , yCoord
	Startcat:              
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawct
	                       mov  Cx, cat_W
	                       DEC  DX
	                       JZ   ENDINGcat
	                       Jmp  Drawct

	ENDINGcat:             
	                       pop  ax
	                       ret
DrawCat Endp
DrawDog proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, dog_W
	                       MOV  DX, dog_H
	                       mov  DI, offset dog_img
	                       jmp  Startdog
	Drawdg:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   Startdog
	                       MOV  BH,00h
	                       add  cx,xd
	                       add  dx,yd
	                       INT  10h
	                       sub  cx , xd
	                       sub  dx , yd
	Startdog:              
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawdg
	                       mov  Cx, dog_W
	                       DEC  DX
	                       JZ   ENDINGdog
	                       Jmp  Drawdg

	ENDINGdog:             
	                       pop  ax
	                       ret
DrawDog endp
;-------------------------------PROCEDURES USED TO HANDLING SCREEN REFRESHING-----------------------------------
delay proc
	                       mov  di,00FFAH
	LOP1:                  MOV  CX,700
	LOP2:                  LOOP LOP2
	                       DEC  DI
	                       JNZ  LOP1
	                       ret
delay Endp
;;This one is used For gravity because it is much less than the above delay
delay2 proc
	mov cx,0
	mov dx,0a120h
	mov ah,86h
	int 15h
	                       ret
delay2 Endp
waitForNewVR PROC

	;Wait for bit 3 to be zero (not in VR).
	;We want to detect a 0->1 transition.
	                       MOV  DX, 3DAH

	;WAIT FOR BIT 3 TO BE ONE (IN VR)
	_WAITFOREND:           
	                       IN   AL, DX
	                       TEST AL, 08H
	                       JNZ  _WAITFOREND

	_WAITFORNEW:           
	                       IN   AL, DX
	                       TEST AL, 08H
	                       JZ   _WAITFORNEW
	 
	                       RET
waitForNewVR ENDP

;-------------------------------GRAVITY HANDLING PROCEDURES-----------------------------------

CharacterGravity proc
cmp start_hitting , 1
jz CHECKJUMPING
jmp MOVINGPLAYERDOWN
CHECKJUMPING: CMP isJumping , 1
jnz RETURNTOHITTING
jmp MOVINGPLAYERDOWN
RETURNTOHITTING : ret
	;;yCoord represents the y coordinate of the character (at his head)
	MOVINGPLAYERDOWN:      
	                       MOV  AX , yCoord
	                       add  AX , cat_H
	                       CMP  AX , secondstepline               	;;Check if the cat body is above than the second step
	                       JLE  CHECKBEFOREENDSTEP2               	;;if yes jump to this label to make cat land at this step or fall if the cat is not in same x Coord of the step
	                       SUB  AX , cat_H
	                       CMP  AX , firststepline                	;;Same as the above
	                       JLE  CHECKBEFOREEND
	CONTMOVING:            MOV  AX , GravityAccleration           	;;if the character jumps on the air he should fall to the ground and this label is responsible for that
	                       ADD  yCoord , AX
	                       MOV  AX , yCoord
	                       add  AX , cat_H
	                       CMP  AX,LandLine                       	;;if the character reaches the ground we stop the gravity effect , else it continue to fall
	                       Jge  ENDMOVING
						   ;call DrawBackGround
	                       ;call waitForNewVR
	                       
	                      ; call DrawHeart
	                       ;call DrawHeart2
						   
	                       ;call DrawCat
	                       ;call DrawDog
	;call delay2
	                       jmp  MOVINGPLAYERDOWN
					 
	CHECKBEFOREEND:                                               	;;This label is for checking if the cat at the X coordinates of the step or not (for first two steps)
	                       MOV  BX , xCoord
	                       CMP  BX ,35
	                       JGE  SECONDCHECK
	                       JMP  CONTMOVING
	SECONDCHECK:           CMP  BX,125
	                       JLE  LANDONSTEP                        	;;if the character between x Coordinates of the first step we jump to this label in order to make the character lands on step
	                       JMP  CHECKBEFOREEND2
	CHECKBEFOREEND2:       MOV  BX , xCoord
	                       CMP  BX ,188
	                       JGE  SECONDCHECK2
	                       JMP  CONTMOVING
	SECONDCHECK2:          CMP  BX,268
	                       JLE  LANDONSTEP                 	;;if the character between x Coordinates of the second step we jump to this label in order to make the character lands on step
	                       JMP  CONTMOVING
	;;This label is for checking if the cat at the X coordinates of the third step
	CHECKBEFOREENDSTEP2:   MOV  BX , xCoord
	                       CMP  BX ,90
	                       JGE  SECONDCHECKSTEP2
	                       JMP  CONTMOVING
	SECONDCHECKSTEP2:      CMP  BX,205
	                       JLE  LANDONSTEP2                       	;;if the character between x Coordinates of the above step we jump to this label in order to make the character lands on step
	                       JMP  CONTMOVING
ENDMOVING:

	                      mov yCoord , 115
	                       ret
ENDMOVINGSTEP1: mov yCoord , 79
	                       ret
ENDMOVINGSTEP2:  MOV yCoord , 43
RET
	LANDONSTEP:            call waitForNewVR
	;call delay2
	                       call DrawBackGround                 	;;Remove the old position
	                       call DrawHeart
	                       call DrawHeart2
						   
	                       call DrawCat                           	;;Draw with new onw
	                       call DrawDog
	                       	;;Draw with new onw
	                       MOV  AX , GravityAccleration
	                       ADD  yCoord , AX
	                       MOV  AX , yCoord
	                       add  AX , cat_H
	                       CMP  AX,firststepline                  	;;if they are greater or equal to the landline (ground)
	                       Jge  ENDMOVINGSTEP1
	                       JMP  LANDONSTEP

	LANDONSTEP2:           call waitForNewVR
	;call delay2
	                       call DrawBackGround              	;;Remove the old position
	                       call DrawHeart
						   
	                       call DrawHeart2
						   
	                       call DrawCat                           	;;Draw with new onw
	                       call DrawDog
	;;call delay2                       	;;Draw with new onw
	                       MOV  AX , GravityAccleration
	                       ADD  yCoord , AX
	                       MOV  AX , yCoord
	                       add  AX , cat_H
	                       CMP  AX,secondstepline                 	;;if they are greater or equal to the landline (ground)
	                       Jge  ENDMOVINGSTEP2
	                       JMP  LANDONSTEP2
	

CharacterGravity Endp
;----------DOG GRAVITY------------------
DOG_CharacterGravity proc
	;;yCoord represents the y coordinate of the character (at his leg)
	D_MOVINGPLAYERDOWN:    
	                       MOV  AX , yd
	                       add  AX , dog_H
	                       CMP  AX , secondstepline               	;;Check if the cat body is above than the second step
	                       JLE  D_CHECKBEFOREENDSTEP2             	;;if yes jump to this label to make cat land at this step or fall if the cat is not in same x Coord of the step
	                       SUB  AX , dog_H
	                       CMP  AX , firststepline                	;;Same as the above
	                       JLE  D_CHECKBEFOREEND
	D_CONTMOVING:          MOV  AX , GravityAccleration           	;;if the character jumps on the air he should fall to the ground and this label is responsible for that
	                       ADD  yd , AX
	                       MOV  AX , yd
	                       add  AX , dog_H
	                       CMP  AX,LandLine                       	;;if the character reaches the ground we stop the gravity effect , else it continue to fall
	                       Jge  D_ENDMOVING
	                       ;call waitForNewVR
	                       ;call DrawBackGround
	                       ;call DrawHeart
						   
	                       ;call DrawHeart2
						   
	                       ;call DrawCat
	                       ;call DrawDog
	;call delay2
	                       jmp  D_MOVINGPLAYERDOWN
					 
	D_CHECKBEFOREEND:                                             	;;This label is for checking if the cat at the X coordinates of the step or not (for first two steps)
	                       MOV  BX , xd
	                       CMP  BX ,35
	                       JGE  D_SECONDCHECK
	                       JMP  D_CONTMOVING
	D_SECONDCHECK:         CMP  BX,125
	                       JLE  D_LANDONSTEP                      	;;if the character between x Coordinates of the first step we jump to this label in order to make the character lands on step
	                       JMP  D_CHECKBEFOREEND2
	D_CHECKBEFOREEND2:     MOV  BX , xd
	                       CMP  BX ,188
	                       JGE  D_SECONDCHECK2
	                       JMP  D_CONTMOVING
	D_SECONDCHECK2:        CMP  BX,270
	                       JLE  D_LANDONSTEP                      	;;if the character between x Coordinates of the second step we jump to this label in order to make the character lands on step
	                       JMP  D_CONTMOVING
	;;This label is for checking if the cat at the X coordinates of the third step
	D_CHECKBEFOREENDSTEP2: MOV  BX , xd
	                       CMP  BX ,90
	                       JGE  D_SECONDCHECKSTEP2
	                       JMP  D_CONTMOVING
	D_SECONDCHECKSTEP2:    CMP  BX,205
	                       JLE  D_LANDONSTEP2                     	;;if the character between x Coordinates of the above step we jump to this label in order to make the character lands on step
	                       JMP  D_CONTMOVING
D_ENDMOVING:

	                      mov yd , 115
	                       ret
D_ENDMOVINGSTEP1: mov yd , 79
	                       ret
D_ENDMOVINGSTEP2:  MOV yd , 43
RET

	D_LANDONSTEP:          call waitForNewVR
	                       call DrawBackGround                 	;;Remove the old position
	                       call DrawHeart
						   
	                       call DrawHeart2
						   
	                       call DrawCat                           	;;Draw with new onw
	                       call DrawDog
						   
	;;call delay2                       	;;Draw with new onw
	                       MOV  AX , GravityAccleration
	                       ADD  yd , AX
	                       MOV  AX , yd
	                       add  AX , dog_H
	                       CMP  AX,firststepline                  	;;if they are greater or equal to the landline (ground)
	                       Jge  D_ENDMOVINGSTEP1
	                       JMP  D_LANDONSTEP

	D_LANDONSTEP2:         call waitForNewVR
	;call delay2  
	                       call DrawBackGround                 	;;Remove the old position
	                       call DrawHeart
						   
	                       call DrawHeart2
						   
	                       call DrawCat                           	;;Draw with new onw
	                       call DrawDog
	;;call delay2                       	;;Draw with new onw
	                       MOV  AX , GravityAccleration
	                       ADD  yd , AX
	                       MOV  AX , yd
	                       add  AX , dog_H
	                       CMP  AX,secondstepline                 	;;if they are greater or equal to the landline (ground)
	                       Jge  D_ENDMOVINGSTEP2
	                       JMP  D_LANDONSTEP2
	

DOG_CharacterGravity Endp
	;


;-------------------------------DRAWING HEALTH BAR PROCEDURE-----------------------------------

Draw_Health_Bar PROC 

;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Decrease health
;------------------- check whether the 1st player has been hit?
                 cmp Player1_DecHealth,0 ; no hits
                 je SecondPlayerTest   

;------------------- check whether the 1st player is the loser?
                sub Player1_Health_cx,1
                cmp Player1_Health_cx, 23   ; check for the current position if it reaches the end then this is the loser
                ja decHealth1              
                call GAME_OVER     
  
                
 decHealth1:
                mov cx, Player1_Health_cx   ;store in cx the current location of the player's health bar
                mov dx,4
                mov al,04  ;Pixel color
                mov ah,0ch ;Draw Pixel Command
                decP1: int 10h
                inc dx
                cmp dx,15
                jnz decP1
                Inc countHB1    ;for only doubling the value to decrease 
                cmp countHB1,2   
                jb doubleHB1
                jmp countinueHB
                
                doubleHB1: dec Player1_Health_cx   
                jmp decHealth1
                countinueHB:
                mov countHB1,0   ; return it to zero for the other calls
               
;------------------- check again whether the 1st player is the loser now?
                cmp Player1_Health_cx, 23
                ja SecondPlayerTest
                call GAME_OVER 
   
;------------------------------- check whether the 2nd player has been hit? ----------------------
SecondPlayerTest:
                
                 cmp Player2_DecHealth,0 
                 je CheckIncHealthP1  

;------------------- check whether the 2nd player is the loser?
                sub Player2_Health_cx,1
                cmp Player2_Health_cx, 253
                ja decHealth2
                call GAME_OVER 
                 

 decHealth2:
                 
                mov cx, Player2_Health_cx
                mov dx,4
                mov al,04      
                mov ah,0ch 
                decP2: int 10h
                inc dx
                cmp dx,15
                jnz decP2
                Inc countHB2
                cmp countHB2,2
                jb doubleHB2
                jmp countinueHB2
                
                doubleHB2: dec Player2_Health_cx 
                jmp decHealth2
                countinueHB2:
                mov countHB2,0

;------------------- check again whether the 2nd player is the loser?
                cmp Player2_Health_cx, 253
                ja CheckIncHealthP1
                call GAME_OVER



;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Increase health
;-------------------- check whether the first player caught a powerup to increase his health?------

CheckIncHealthP1:
 				   cmp Player1_IncHealth,0
                   je CheckIncHealthP2

;------------- if he caught a powerup then:
                cmp Player1_Health_cx,70 ; if his health is full then do nothing
                jae CheckIncHealthP2 
IncHealth1:
                mov cx, Player1_Health_cx
                mov dx,4
                mov al,0Ah ;Pixel color
                mov ah,0ch ;Draw Pixel Command
                incP1: int 10h
                inc dx
                cmp dx,15
                jnz incP1
                Inc countINC1    ;for only doubling the value to increase 
                cmp countINC1,2
                jb doubleINCHB1
                jmp countinueHBinc
                
                doubleINCHB1: inc Player1_Health_cx
                jmp IncHealth1
                countinueHBinc:
                mov countINC1,0
                inc Player1_Health_cx

;-------------------- check whether the second player caught a powerup to increase his health?------

CheckIncHealthP2:
                cmp Player2_IncHealth,0
                je check_draw_HB

;------------- if he caught a powerup then: 
                cmp Player2_Health_cx,299 ; if his health is full then do nothing
                jae check_draw_HB

IncHealth2:
                mov cx, Player2_Health_cx
                mov dx,4
                mov al,0Ah ;Pixel color
                mov ah,0ch ;Draw Pixel Command
                incP2: int 10h
                inc dx
                cmp dx,15
                jnz incP2
                Inc countINC2    ;for only doubling the value to increase 
                cmp countINC2,2
                jb doubleINCHB2
                jmp countinueHBinc2
                
                doubleINCHB2: inc Player2_Health_cx 
                jmp IncHealth2
                countinueHBinc2:
                mov countINC2,0
                inc Player2_Health_cx


;---------------------------------- to make sure that it is drawn once ------------------      
check_draw_HB:  
                mov ax, HealthBarDrawn
                cmp ax,0
                je DrawFirst 


ReFinish: jmp FinishHealthBar

;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Draw health bar once
; ---------------------------------- Backcolor of health bar------------------------------
DrawFirst:
                mov al,0Fh ; backcolor of the bar 
                mov ah,0ch   

                ; position of 1st player's health bar 
                mov cx,20 
                mov dx,3
            
                cmp HealthBarPos, 70  ; if it is for the first player then jump to temp
                Je temp 

                ; else update x position for the 2nd player's health bar                          
                mov cx, 250
    
                ; store values of cx, dx to loop on them according to which player's health bar is being drawn
    temp:
                mov temp_cx_HealthBar, cx
                mov temp2_cx_HealthBar, cx ; stores the original value of cx, before updating it
                add temp_cx_HealthBar, 50
                mov temp_dx_HealthBar, dx
                add temp_dx_HealthBar, dx
                add temp_dx_HealthBar, 10

    BarBackDrawing:
                inc cx
                int 10h
                cmp cx, temp_cx_HealthBar
                JNE BarBackDrawing
                mov cx, temp2_cx_HealthBar  
                inc dx      
                cmp dx, temp_dx_HealthBar
                JNE BarBackDrawing

;-------------------------------- Filling the bar with greencolor ------------------------------
                mov al,0Ah  ; defult green color for the filling of the bar
                mov ah,0ch   

                ; position of 1st player's health bar 
                mov cx, 21
                mov dx,4
                cmp HealthBarPos, 70  ; if it is for the first player then jump to temp
                Je tempFilling

                ; else update x position for the 2nd player's health bar                          
                mov cx, 251
    
                ; store values of cx, dx to loop on them according to which player's health bar is being drawn
    tempFilling:
                mov temp_cx_HealthFillingBar, cx
                mov temp2_cx_HealthFillingBar, cx ; stores the original value of cx, before updating it
                add temp_cx_HealthFillingBar, 48

    BarFilling:
                inc cx
                int 10h
                cmp cx, temp_cx_HealthFillingBar 
                JNE BarFilling
                mov cx,temp2_cx_HealthFillingBar 
                inc dx      
                cmp dx, 15
                JNE BarFilling

             mov Player1_Health_cx,70
             mov Player2_Health_cx,300

FinishHealthBar:
             mov  Player2_DecHealth,0
             mov  Player1_DecHealth,0
             mov  Player1_IncHealth,0
             mov  Player2_IncHealth,0
RET

Draw_Health_Bar ENDP



;-------------------------------DRAWING THE HITS PROCEDURES-----------------------------------

DrawFish proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, fish_W
	                       MOV  DX, fish_H
	                       mov  DI, offset fish_img
	                       jmp  Startfish
	Drawfi:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,31
	                       JZ   Startfish
	                       MOV  BH,00h
	                       add  cx,xf
	                       add  dx,yf
	                       INT  10h
	                       sub  cx , xf
	                       sub  dx , yf
	Startfish:             
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawfi
	                       mov  Cx, fish_W
	                       DEC  DX
	                       JZ   ENDINfish
	                       Jmp  Drawfi

	ENDINfish:             
	                       pop  ax
	                       ret

DrawFish Endp
	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  Draw Ball >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DrawBall proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, ball_W
	                       MOV  DX, ball_H
	                       mov  DI, offset ball_img
	                       jmp  Startball
	Drawba:                
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   Startball
	                       MOV  BH,00h
	                       add  cx,xball
	                       add  dx,yball
	                       INT  10h
	                       sub  cx , xball
	                       sub  dx , yball
	Startball:             
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawba
	                       mov  Cx, ball_W
	                       DEC  DX
	                       JZ   ENDball
	                       Jmp  Drawba

	ENDball:               
	                       pop  ax
	                       ret

DrawBall Endp

;-------------------------------DRAWING LOGO-----------------------------------	
	
DrawCatLogo proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, catlo_W
	                       MOV  DX, catlo_H
	                       mov  DI, offset logo_cat_img
	                       jmp  StartClogo
	DrawdClogo:            
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   StartClogo
	                       MOV  BH,00h
	                       add  cx,xcatlo
	                       add  dx,ycatlo
	                       INT  10h
	                       sub  cx , xcatlo
	                       sub  dx , ycatlo
	StartClogo:            
	                       inc  DI
	                       DEC  Cx
	                       JNZ  DrawdClogo
	                       mov  Cx, catlo_W
	                       DEC  DX
	                       JZ   ENDINGClogo
	                       Jmp  DrawdClogo

	ENDINGClogo:           
	                       pop  ax
	                       ret
DrawCatLogo endp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Logo dog drawing ;;;;;;;;;;;;;;;;;;;;;;;;;
DrawDogLogo proc
	                       push ax
	                       MOV  AH,0Bh
	                       MOV  CX, doglo_W
	                       MOV  DX, doglo_H
	                       mov  DI, offset logo_dog_img
	                       jmp  StartDlogo
	DrawdDlogo:            
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   StartDlogo
	                       MOV  BH,00h
	                       add  cx,xdoglo
	                       add  dx,ydoglo
	                       INT  10h
	                       sub  cx , xdoglo
	                       sub  dx , ydoglo
	StartDlogo:            
	                       inc  DI
	                       DEC  Cx
	                       JNZ  DrawdDlogo
	                       mov  Cx, doglo_W
	                       DEC  DX
	                       JZ   ENDINGDlogo
	                       Jmp  DrawdDlogo

	ENDINGDlogo:           
	                       pop  ax
	                       ret
DrawDogLogo endp
;-------------------------------PROCEDURES USED TO HANDLING HITTING-----------------------------------
DogHitCat proc
	                       mov  start_balling ,1
	; initial draw for the ball
	                       mov  BX ,xd
	                       mov  DX, yd                            	; start position y for the fish
	                       mov  xball , BX
	                       mov  yball , DX
	                       call DrawBall
                    
	; set coordinates of the target "Cat"

	                       mov  cx, yCoord                        	; y above coordiante of the cat
	                       sub  cx, cat_H                         	; (Y above - cat height)
	                       mov  ybelow_cat ,cx                    	; y below coordiante of the cat

	                       mov  cx, xCoord                        	; x above coordiante of the cat
	                       add  cx, cat_W                         	; (X Right + cat width)
	                       mov  xright_cat ,cx                    	; x below coordiante of the cat
				  
	; loop for ball movement till it hits the cat or reaches end of the screen
	repeat2:               
	; determine direction of the hit
	                       mov  bx , xd
	                       cmp  bx ,xCoord                        	; compare xdog with x cat
	                       ja   decrease_Xball                    	; if Xdog > Xcat decrease ball position x
	                       mov  cx,6                              	; else increase ball position x
	                       add  xball , cx
	continue_draw2:        
	                       mov  bx, xball                         	; store ball new position x in bx
	;	mov dx, xCoord ; postion of colliosion (X Dog-10)
	;	sub dx,10 ; stop point
	;	push dx  ;  save point of colliosion on stack
	                       push bx                                	; save fish position x on the stack
	; re draw all screen componenets including the ball
	                       call waitForNewVR
	;call delay2
	                       call DrawBackGround
	                      
						   
	                       call DrawDog                           	; at new postion
	                       call DrawCat
						    call DrawHeart
						   
	                       call DrawHeart2
	                       call DrawBall
	                       call DOG_CharacterGravity
	                       call read_the_key
	                       pop  bx
	;pop dx
	; reaches Cat x right position?
	                       cmp  bx,xCoord                         	; Xball >= Xleft_cat #compare Xball with Xleft_Cat
	                       jae  check_Xright_cat                  	; make sure it is in the x range of the Cat
	continuee2:                                                   	; if not continue looping
	                       mov  ax,300                            	; end of the screen
	                       cmp  bx, ax                            	; the fish reaches end of the screen?
	                       jae  finish2                           	; end of the loop
                   
	                       loop repeat2

	finish2:               
	                       mov  start_balling ,0
                           mov Cat_Took_Shield, 0
	                       ret

	check_Xright_cat:      
	                       cmp  bx , xright_cat                   	; Xcat <= Xright_cat
	                       jbe  check_Ybelow_cat                  	; make sure it matches y position too!
	                       jmp  continuee2                        	; if no return yo continue

	check_Ybelow_cat:      mov  cx, yball                         	; store y fish in cx
	                       cmp  cx, ybelow_cat                    	; check Yfish >= y below ?
	                       jae  check_Yabove_cat                  	; if yes: check Yfish <= y below ?
	                       jmp  continuee2                        	; if no
	check_Yabove_cat:      cmp  cx, yCoord                        	; check Yfish <= y above?
	                       jbe  decHealthCatDone                  	; if yes (cat hits the dog )
	                       jmp  continuee2                        	; if no
						     
	decrease_Xball:        mov  cx,6
	                       sub  xball , cx
	                       jmp  continue_draw2

	;;;;;;;;;;;;;;;;; hit effect decrease health of the dog  ;;;;;;;;;;;;;;;;
	decHealthCatDone:      CMP Cat_Took_Shield,1
                           je finish2
                           
	                       mov  Player1_DecHealth,1               	;dec health of dog
	                       call Draw_Health_Bar
						   mov DI, offset dog_score+1
							mov ah, 1
							add [di],ah 
							CALL DrawNames	
                           cmp Dog_Took_Dub_Power, 1
                           jnz finish2
                           mov  Player1_DecHealth,1               	;dec health of dog again
	                       call Draw_Health_Bar
                           mov Dog_Took_Dub_Power, 0
	                       jmp  finish2

DogHitCat endp
 
	;<<<<<<<<<<<<<<<<<<<<<<<<<<<< FISH : Cat Hits The Dog  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CatHitDog proc
	                       mov  start_hitting ,1
	; initial draw for the fish
	                       mov  BX , xCoord
	; sub BX, 10 ; start position x for the fish
	                       mov  DX, yCoord                        	; start position y for the fish
	                       mov  xf , BX
	                       mov  yf , DX
	                       call DrawFish
                   
	; call read_the_key
	; set coordinates of the target "dog"

	                       mov  cx, yd                            	; y above coordiante of the dog
	                       sub  cx, dog_H                         	; (Y above - dog width)
	                       mov  ybelow_dog ,cx                    	; y below coordiante of the dog

	                       mov  cx, xd                            	; x above coordiante of the dog
	                       add  cx, dog_W                         	; (X Right + dog width)
	                       mov  xright_dog ,cx                    	; x below coordiante of the dog


				  
	; loop for fish movement till it hits the dog or reaches end of the screen
	repeat:                
	; determine direction of the hit
	                       mov  bx , xCoord
	                       cmp  bx ,xd                            	; compare xdog with x cat
	                       jb   increase_Xfish                    	;RIGHT: if Xcat < Xdog increase fish position x
	                       mov  cx,6
	                       sub  xf , cx                           	;decrease fish position x
	continue_draw:         
	                       mov  bx, xf                            	; store fish position x in bx
	;  sub bx, fish_W
	                       mov  dx, xd                            	; postion of colliosion (X Dog-10)
	                       sub  dx,10                             	; stop point
	                       push dx                                	;  save point of colliosion on stack
	                       push bx                                	; save fish position x
	; re draw all screen componenets including the fish
	                       call waitForNewVR
	;call delay2
							
	                       call DrawBackGround
						   
	                      
						   
	                       call DrawDog
	                       call DrawCat
	                       call DrawFish
						    call DrawHeart
						   
	                       call DrawHeart2
	                      call CharacterGravity
                          
						   
	                       call read_the_key
	                       pop  bx
	                       pop  dx
	; reaches Dog x right position?
	                       cmp  bx,xd                             	; Xfish >= Xleft_dog #compare Xfish with Xleft_Cat
	                       jae  check_Xright                      	; make sure it is in the x range of the dog
	;if not continue looping
	continuee:             
	                       mov  ax, 300                           	; end of the screen
	                       cmp  bx, ax                            	; the fish reaches end of the screen?
	                       jae  finish                            	; end of the loop
                   
	                       loop repeat

	finish:                
	                       mov  start_hitting ,0
                           mov Dog_Took_Shield, 0
	                       ret

	check_Xright:          
	                       cmp  bx , xright_dog                   	; Xfish <= Xright_dog
	                       jbe  check_Ybelow                      	; make sure it matches y position too!
	                       jmp  continuee                         	; if no return yo continue

	check_Ybelow:          mov  cx, yf                            	; store y fish in cx
	                       sub  cx , Fish_H
	                       cmp  cx, ybelow_dog                    	; check Yfish >= y below ?
	                       jae  check_Yabove                      	; if yes: check Yfish <= y below ?
	                       jmp  continuee                         	; if no

	check_Yabove:          cmp  cx, yd                            	; check Yfish <= y above?
	                       jbe  decHealthDogDone                  	; if yes (cat hits the dog )
	                       jmp  continuee                         	; if no
						     
	increase_Xfish:        mov  cx,6
	                       add  xf , cx
	                       jmp  continue_draw

	;;;;;;;;;;;;;;;;; hit effect decrease health of the dog  ;;;;;;;;;;;;;;;;
	decHealthDogDone:      cmp Dog_Took_Shield, 1
                           je finish
	                       mov  Player2_DecHealth,1               	;dec health of dog
	                       call Draw_Health_Bar
						   mov DI, offset cat_score+1
						   mov ah, 1
						   add [di],ah 
						   CALL DrawNames	
                           cmp Cat_Took_Dub_Power, 1
                           jnz finish
                           mov  Player2_DecHealth,1   
                           call Draw_Health_Bar
                           mov Cat_Took_Dub_Power, 0
	                       jmp  finish
               
CatHitDog endp
;-------------------------------READING KEYS FROM PLAYERS-----------------------------------
read_the_key proc
mov isJumping , 0
	CHECK:                 mov  ah,1
	                       int  16h
	                       jz   reyooo
	                       mov  ah,0
	                       int  16h

	;;;;;;;;;;;;;;;;;;;;;; cat movment ;;;;;;;;;;;;;;;;;;;;;
	                       cmp  ah,44                             	; Z
	                       jz   reFish_Hit

	                       cmp  ah,75                             	; <=
	                       jz   MoveLeft

	                       cmp  ah,77                             	; =>
	                       jz   MoveRight

	                       cmp  ah, 45                            	; X
	                       jz   JUMPUP
	;;;;;;;;;;;;;;;;;;;;;; dog movment ;;;;;;;;;;;;;;;;;;;;;
	                       cmp  ah,30                             	; A
	                       jz   dog_MoveLeft

	                       cmp  ah,32                             	; D
	                       jz   TEMP_DOGMOVERIGHT

	                       cmp  ah, 17                            	; w
	                       jz   TEMP_DOGJUMP

	                       cmp  ah, 35                            	; H
	                       jz   TEMP_BALLHIT
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ReadKey:               
	                       call waitForNewVR        
	                       call CharacterGravity
                           call DOG_CharacterGravity
						   call DrawBackGround
						   call DrawHeart
	                       call DrawHeart2         
						   call DrawCat
	                       call DrawDog
						  
	                       jmp  CHECK
						   ;;;;;;;;;;;;;;;;;;;;;; temp lables ;;;;;;;;;;;;;;;;;;;
	reyooo:                jmp  yooo
	reFish_Hit:            jmp  Fish_Hit
	TEMP_DOGMOVERIGHT:      JMP   dog_MoveRight
	TEMP_DOGJUMP:          JMP dog_JUMPUP
	TEMP_BALLHIT:		   JMP BallHit
	TEMP_READKEY:          JMP ReadKey
	;;;;;;;;;;;;;;;;;;;;;;;;;;; CAT MOVEMENT LABLES ;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MoveLeft:              
	                       cmp  xCoord, 0
	                       jle  ReadKey
	                       sub  xCoord,6
	                       jmp  kamel_darb
	                       
	MoveRight:             cmp  xCoord, 292
	                       jge  ReadKey
	                       add  xCoord , 6
	                       jmp  kamel_darb
	                      
	JUMPUP:                mov isJumping , 1
						   cmp yCoord ,70
						   jle SHORTJUMP
						   JMP HIGHJUMP
			SHORTJUMP:     SUB yCoord , 20
			     			JMP CONTJUMPING
	        HIGHJUMP:       sub  yCoord , 46
	         CONTJUMPING:              jmp  kamel_darb
	                       jmp  ReadKey

	
	;;;;;;;;;;;;;;;;;;;;;; DOG MOVEMENT LABLES ;;;;;;;;;;;;;;;;;;;;;
	dog_MoveLeft:          
	                       cmp  xd, 3
	                       jle  ReadKey
	                       sub  xd,6
	                       jmp  kamel_ball
	                       jmp  ReadKey

	dog_MoveRight:         cmp  xd, 284

	                       jae  TEMP_READKEY
	                       add  xd , 6
	                       jmp  kamel_ball
	                       jmp  ReadKey
	dog_JUMPUP:            cmp yd ,70
						   jle SHORTJUMPD
						   JMP HIGHJUMPD
			SHORTJUMPD:     SUB yd , 20
			     			JMP CONTJUMPINGD
	        HIGHJUMPD:               sub  yd, 46
	        CONTJUMPINGD:              jmp  kamel_ball
	                       jmp  ReadKey
	;;;;;;;;;;;;;;;;;; ball hit  ;;;;;;;;;;;;;;;;;;;;
	BallHit:               
	                       call DogHitCat
	                       jmp  ReadKey
	;;;;;;;;;;;;;;;;;; fish hit ;;;;;;;;;;;;;;;;;;
	Fish_Hit:              
	                       call CatHitDog
                        
	                       jmp  ReadKey

	;;;;;;;;;;;;;;;;;;;;;;;;;;; TO READ KEY WHILE HITTING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	kamel_darb:            cmp  start_hitting ,1
	                       je   bye
	                       jmp  ReadKey

	kamel_ball:            cmp  start_balling ,1
	                       je   bye
	                       jmp  ReadKey
	;;;;;;;;;;;;;;;;;;;;;;;;;;;to check if key not pressd while hitting or not ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	yooo:                  cmp  start_hitting , 1
	                       je   bye
	                       cmp  start_balling , 1
	                       je   bye
	                       mov  ah,1
	                       int  16h
	                       jz   Again
	                       jmp  ReadKey
	Again:                 jmp  CHECK

	;;;;;;;;;;;;;;;;;;;;;;;;;;; FINISH ;;;;;;;;;;;;;;;;;;;;;;;;
	bye:        
	
	           ret

read_the_key endp
;-------------------------------POWER UPS PROCEDURES-----------------------------------
DrawHeart proc

                       push ax
					   push DI
	CheckYpos1Cat:        mov  ax,yCoord
	                       cmp  heart_powerupY, ax
	                       jl   CheckYpos1Dog
	CheckYpos2Cat:        add  ax,cat_H
	                       cmp  heart_powerupY, ax
	                       jg   CheckYpos1Dog
	CheckXpos1Cat:        mov  ax,xCoord
	                       cmp  heart_powerupX, ax
	                       jl   CheckYpos1Dog
	CheckXpos2Cat:        add  ax,cat_W
	                       cmp  heart_powerupX, ax
	                       jg   CheckYpos1Dog
						   mov Cat_Took_PowerUp, 1
						   jmp Cattook
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                    
	CheckYpos1Dog:        mov  ax,yd
	                       cmp  heart_powerupY, ax
	                       jl   DidnotTakeMiddle12
	CheckYpos2Dog:        add  ax,cat_H
	                       cmp  heart_powerupY, ax
	                       jg   DidnotTakeMiddle12
	CheckXpos1Dog:        mov  ax,xd
	                       cmp  heart_powerupX, ax
	                       jl   DidnotTakeMiddle12
	CheckXpos2Dog:        add  ax,cat_W
	                       cmp  heart_powerupX, ax
	                       jg   DidnotTakeMiddle12
                           jmp Dogtook
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DidnotTakeMiddle12: jmp DidnotTakeMiddle
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	Cattook:    cmp ChesonPowerUp, 0
				je catTook_HeartDown
				cmp ChesonPowerUp, 1
				je catTook_HeartUP
                cmp ChesonPowerUp, 2
				je catTook_DubPower
                cmp ChesonPowerUp, 3
				je catTook_Shield
				cmp ChesonPowerUp, 4
				je catTook_coin
                
                jmp Anywaycat
				
				catTook_HeartDown:							
							mov Player1_DecHealth, 1
						   	call Draw_Health_Bar		
							jmp Anywaycat   
				catTook_HeartUP:
							mov Player1_IncHealth, 1
						   	call Draw_Health_Bar
							jmp Anywaycat
                catTook_Shield:
							mov Cat_Took_Shield, 1
							jmp Anywaycat
                catTook_DubPower:
                            mov Cat_Took_Dub_Power, 1
                            jmp Anywaycat
				catTook_coin:
                            mov DI, offset cat_score+2
							mov ah, 1
							add [di],ah 
							CALL DrawNames	
                            jmp Anywaycat
				Anywaycat:
						   mov  CurrentPowerUp, 0
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp
                           jmp DidnotTake
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DidnotTakeMiddle: jmp DidnotTake
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    Dogtook:    cmp ChesonPowerUp, 0
				je dogTook_HeartDown
				cmp ChesonPowerUp, 1
				je dogTook_HeartUP
                cmp ChesonPowerUp, 2
				je dogTook_DubPower
                cmp ChesonPowerUp, 3
				je dogTook_Shield
				cmp ChesonPowerUp, 4
				je dogTook_coin
                jmp Anywaydog
				
				dogTook_HeartDown:							
							mov Player2_DecHealth, 1
						   	call Draw_Health_Bar		
							jmp Anywaydog   
				dogTook_HeartUP:
							mov Player2_IncHealth, 1
						   	call Draw_Health_Bar
							jmp Anywaydog
                dogTook_Shield:
							mov Dog_Took_Shield, 1
							jmp Anywaydog
                dogTook_DubPower:
                            mov Dog_Took_Dub_Power, 1
                            jmp Anywaydog
				dogTook_coin:
                            mov DI, offset dog_score+2
							mov ah, 1
							add [di],ah 
							CALL DrawNames	
                            jmp Anywaydog
				Anywaydog:
						   mov  CurrentPowerUp, 0
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DidnotTake:            
	                       cmp  draw_PowerUp, 0
	                       jz   ENDINGHeart
							mov al,0
							mov bx ,0

	                       MOV  AH,0Bh
	                       MOV  CX, heart_W
	                       MOV  DX, heart_H
	                       CMP  ChesonPowerUp, 0
	                       jz   Blackheart
	                       CMP  ChesonPowerUp, 1
	                       jz   RedHeart
	                       CMP  ChesonPowerUp, 2
	                       jz   Power
	                       CMP  ChesonPowerUp, 3
	                       jz   shieldDraw
	                       CMP  ChesonPowerUp, 4
	                       jz   SpeedUpDraw
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	RedHeart:              mov  DI, offset heart_img
	                       jmp  STARTDRAWING

	Blackheart:            mov  DI, offset Black_heart_img
	                       jmp  STARTDRAWING
	Power:                 mov  DI, offset DubPower
	                       jmp  STARTDRAWING
	shieldDraw:            mov  DI, offset Shield
	                       jmp  STARTDRAWING
	SpeedUpDraw:           mov  DI, offset SpeedUp
	                       jmp  STARTDRAWING
                        
	STARTDRAWING:          jmp  StartHeart
                     
	Drawalb:               
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   StartHeart
	                       MOV  BH,00h
	                       add  cx,heart_powerupX
	                       sub  dx, heart_W
	                       add  dx,heart_powerupY
                       
	                       INT  10h
	                       sub  cx , heart_powerupX
	                       add  dx, heart_W
	                       sub  dx , heart_powerupY
                        
	StartHeart:            
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawalb
	                       mov  Cx, heart_W
	                       DEC  DX
	                       JZ   ENDINGHeart
	                       Jmp  Drawalb

	ENDINGHeart:           mov  draw_PowerUp , 1
							pop di
	                       pop  ax
						   
	                       ret
DrawHeart Endp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawHeart2 proc


	                       push ax
						   push DI
	CheckYpos12Cat:        mov  ax,yCoord
	                       cmp  heart_powerupY2, ax
	                       jl   CheckYpos12Dog
	CheckYpos22Cat:        add  ax,cat_H
	                       cmp  heart_powerupY2, ax
	                       jg   CheckYpos12Dog
	CheckXpos12Cat:        mov  ax,xCoord
	                       cmp  heart_powerupX2, ax
	                       jl   CheckYpos12Dog
	CheckXpos22Cat:        add  ax,cat_W
	                       cmp  heart_powerupX2, ax
	                       jg   CheckYpos12Dog
						   mov Cat_Took_PowerUp, 1
						   jmp Cattook2
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CheckYpos12Dog:        mov  ax,yd
	                       cmp  heart_powerupY2, ax
	                       jl   DidnotTakeMiddle22
	CheckYpos22Dog:        add  ax,dog_H
	                       cmp  heart_powerupY2, ax
	                       jg   DidnotTakeMiddle22
	CheckXpos12Dog:        mov  ax,xd
	                       cmp  heart_powerupX2, ax
	                       jl   DidnotTakeMiddle22
	CheckXpos22Dog:        add  ax,dog_W
	                       cmp  heart_powerupX2, ax
	                       jg   DidnotTakeMiddle22
                           jmp Dogtook2
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DidnotTakeMiddle22: jmp DidnotTakeMiddle2
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	Cattook2:   cmp ChesonPowerUp2, 0
				je catTook_HeartDown2
				cmp ChesonPowerUp2, 1
				je catTook_HeartUP2
                cmp ChesonPowerUp2, 2
				je catTook_DubPower2
                cmp ChesonPowerUp2, 3
				je catTook_Shield2
				cmp ChesonPowerUp2, 4
				je catTook_coin2
                jmp Anyway2
				
				catTook_HeartDown2:							
							mov Player1_DecHealth, 1
						   	call Draw_Health_Bar		
							jmp Anyway2   
				catTook_HeartUP2:
							mov Player1_IncHealth, 1
						   	call Draw_Health_Bar
							jmp Anyway2
                catTook_Shield2:
							mov Cat_Took_Shield, 1
							jmp Anyway2
                catTook_DubPower2:
                            mov Cat_Took_Dub_Power, 1
                            jmp Anyway2

				catTook_coin2:
                            mov DI, offset cat_score+2
							mov ah, 1
							add [di],ah 
							CALL DrawNames	
                            jmp Anyway2
				Anyway2:
						   mov  CurrentPowerUp, 1
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp2
                           jmp DidnotTake2
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    DidnotTakeMiddle2: jmp DidnotTake2
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    Dogtook2:    cmp ChesonPowerUp2, 0
				je dogTook_HeartDown2
				cmp ChesonPowerUp2, 1
				je dogTook_HeartUP2
                cmp ChesonPowerUp2, 2
				je dogTook_DubPower2
                cmp ChesonPowerUp2, 3
				je dogTook_Shield2
				cmp ChesonPowerUp2, 4
				je dogTook_coin2
                jmp Anywaydog2
				
				dogTook_HeartDown2:							
							mov Player2_DecHealth, 1
						   	call Draw_Health_Bar		
							jmp Anywaydog2   
				dogTook_HeartUP2:
							mov Player2_IncHealth, 1
						   	call Draw_Health_Bar
							jmp Anywaydog2
                dogTook_Shield2:
							mov Dog_Took_Shield, 1
							jmp Anywaydog2
                dogTook_DubPower2:
                            mov Dog_Took_Dub_Power, 1
                            jmp Anywaydog2
				dogTook_coin2:
                            mov DI, offset dog_score+2
							mov ah, 1
							add [DI],ah 
							call DrawNames	
                            jmp Anywaydog2
				Anywaydog2:
						   mov  CurrentPowerUp, 1
	                       call GenerateRandomNumber
	                       call GenerateRandomPowerUp2
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	DidnotTake2:           
	                       cmp  draw_PowerUp2, 0
	                       jz   ENDINGHeart2
                        
	                       MOV  AH,0Bh
	                       MOV  CX, heart_W
	                       MOV  DX, heart_H
	                       CMP  ChesonPowerUp2, 0
	                       jz   Blackheart2
	                       CMP  ChesonPowerUp2, 1
	                       jz   RedHeart2
	                       CMP  ChesonPowerUp2, 2
	                       jz   Power2
	                       CMP  ChesonPowerUp2, 3
	                       jz   shieldDraw2
	                       CMP  ChesonPowerUp2, 4
	                       jz   SpeedUpDraw2
	RedHeart2:             mov  DI, offset heart_img
	                       jmp  STARTDRAWING2

	Blackheart2:           mov  DI, offset Black_heart_img
	                       jmp  STARTDRAWING2
	Power2:                mov  DI, offset DubPower
	                       jmp  STARTDRAWING2
	shieldDraw2:           mov  DI, offset Shield
	                       jmp  STARTDRAWING2
	SpeedUpDraw2:          mov  DI, offset SpeedUp
	                       jmp  STARTDRAWING2
                        
	STARTDRAWING2:         jmp  StartHeart2
                        
	Drawalb2:              
	                       MOV  AH,0Ch
	                       mov  al, [DI]
	                       CMP  al,16
	                       JZ   StartHeart2
	                       MOV  BH,00h
	                       add  cx,heart_powerupX2
	                       sub  dx, heart_W
	                       add  dx,heart_powerupY2
                       
	                       INT  10h
	                       sub  cx , heart_powerupX2
	                       add  dx, heart_W
	                       sub  dx , heart_powerupY2
                        
	StartHeart2:           
	                       inc  DI
	                       DEC  Cx
	                       JNZ  Drawalb2
	                       mov  Cx, heart_W
	                       DEC  DX
	                       JZ   ENDINGHeart2
	                       Jmp  Drawalb2

	ENDINGHeart2:          mov  draw_PowerUp2 , 1
							pop DI
	                       pop  ax
	                       ret
DrawHeart2 Endp
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PowerUps;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GenerateRandomNumber proc

	                       mov  DI, offset RandomNums
	STARTGENERATING:       
	                       CMP  CurrentPowerUp, 1
	                       jnz  RESUME
	                       ADD  DI, 2
	RESUME:                
	                       mov  ah,0h                             	; interrupts to get system time

	                       int  1ah                               	; CX:DX now hold number of clock ticks since midnight

	                       mov  ax,dx

	                       xor  dx,dx

	                       mov  cx,7

	                       div  cx                                	; here dx contains the remainder of the division - from 0 to 6
	                       mov  cx, 2
	                       mov  bx, dx
	                       mov  ax, dx
	                       xor  dx,dx
	                       div  cx
	                       cmp  dx, 1
	                       jne  evenNum
	                       add  bx,1
	evenNum:               
	                       mov  [DI], bx
	                       cmp  CurrentPowerUp, 1
	                       jz   SecondPower
	                       mov  bx, offset steps_to_draw_powerUps
	                       add  bx, [DI]
	                       mov  ax, [bx]
	                       cmp  ax, 3
	                       jz   DrawOnStep3
	                       cmp  ax, 2
	                       jz   DrawOnStep2
	                       cmp  ax, 1
	                       jz   DrawOnStep1
	                       cmp  ax, 0
	                       jz   DontDraw
		
	DrawOnStep3:           
	                       mov  bx, offset PowerUpsYpos
	                       add  bx, 2
	                       mov  ax, [bx]
	                       mov  heart_powerupY, ax
	                       mov  bx, offset RandomXpos_Step3
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX, ax
	                       jmp  ENDRANDOM

	DrawOnStep2:           
	                       mov  bx, offset PowerUpsYpos
	                       mov  ax, [bx]
	                       mov  heart_powerupY, ax
	                       mov  bx, offset RandomXpos_Step2
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX, ax
	                       jmp  ENDRANDOM
	DrawOnStep1:           
	                       mov  bx, offset PowerUpsYpos
	                       mov  ax, [bx]
	                       mov  heart_powerupY, ax
	                       mov  bx, offset RandomXpos_Step1
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX, ax
	                       jmp  ENDRANDOM
	DontDraw:              
	                       mov  draw_PowerUp, 0
	                       jmp  ENDRANDOM
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	RESUMEMIDDLE:          jmp  RESUME
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	SecondPower:           
		
	                       mov  bx, offset steps_to_draw_powerUps2
	                       add  bx, [DI]
	                       mov  ax, [bx]
	                       cmp  ax, 3
	                       jz   DrawOnStep32
	                       cmp  ax, 2
	                       jz   DrawOnStep22
	                       cmp  ax, 1
	                       jz   DrawOnStep12
	                       cmp  ax, 0
	                       jz   DontDraw2
	DrawOnStep32:          
	                       mov  bx, offset PowerUpsYpos
	                       add  bx, 2
	                       mov  ax, [bx]
	                       mov  heart_powerupY2, ax
	                       mov  bx, offset RandomXpos2_Step3
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX2
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX2, ax
	                       jmp  ENDRANDOM

	DrawOnStep22:          
	                       mov  bx, offset PowerUpsYpos
	                       mov  ax, [bx]
	                       mov  heart_powerupY2, ax
	                       mov  bx, offset RandomXpos2_Step2
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX2
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX2, ax
	                       jmp  ENDRANDOM
	DrawOnStep12:          
	                       mov  bx, offset PowerUpsYpos
	                       mov  ax, [bx]
	                       mov  heart_powerupY2, ax
	                       mov  bx, offset RandomXpos2_Step1
	                       add  bx, [DI]
	                       mov  ax,heart_powerupX2
	                       CMP  ax, [bx]
	                       jz   RESUMEMIDDLE
	                       mov  ax, [bx]
	                       mov  heart_powerupX2, ax
	                       jmp  ENDRANDOM
	DontDraw2:             
	                       mov  draw_PowerUp2, 0
	ENDRANDOM:             
	                       ret
GenerateRandomNumber Endp
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GenerateRandomPowerUp proc
	                       mov  ah,0h                             	; interrupts to get system time

	                       int  1ah                               	; CX:DX now hold number of clock ticks since midnight

	                       mov  ax,dx

	                       xor  dx,dx

	                       mov  cx,5

	                       div  cx                                	; here dx contains the remainder of the division - from 0 to 4
	                       mov  ChesonPowerUp, dx
	                       ret
GenerateRandomPowerUp Endp

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GenerateRandomPowerUp2 proc
	                       mov  ah,0h                             	; interrupts to get system time

	                       int  1ah                               	; CX:DX now hold number of clock ticks since midnight

	                       mov  ax,dx

	                       xor  dx,dx

	                       mov  cx,5

	                       div  cx                                	; here dx contains the remainder of the division - from 0 to 4
	                       mov  ChesonPowerUp2, dx
	                       ret
GenerateRandomPowerUp2 Endp

;--------------------------------------	GAME OVER PROCEDURE------------------------------------------------------------
 GAME_OVER PROC
  
					mov  Player2_DecHealth,0
					mov  Player1_DecHealth,0
					mov  Player1_IncHealth,0
					mov  Player2_IncHealth,0
					mov HealthBarDrawn,0

				;clear
					mov ax,0600h
					mov bh,07
					mov cx,0
					mov dx,184FH
					int 10h 

				

					; graphics mode
					mov ah,0
					mov al,13h
					int 10h

					; move cursor
					mov dl, 7 ; column. 
					mov dh, 3 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h

					; Display ANGRY PETS
					mov ah,09
					mov dh,0
					mov dx, offset ANGRY_PETS
					int 21h
					
					;Set the cursor 
					mov dl, 15 ; column. 
					mov dh, 10 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h
					
					; Display the game over  
					mov ah,09
					mov dh,0
					mov dx, offset GAME_OVER_STR
					int 21h      



					;Set the cursor 
					mov dl, 11 ; column. 
					mov dh, 12 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h
					
					; Display the winner 
					mov ah,09
					mov dh,0
					mov dx, offset THE_WINNER
					int 21h       


					cmp Player2_Health_cx, 253  ; Check this health if it reaches the minimum then player 2 is the loser
					je LOSER_DOG

					cmp Player1_Health_cx, 23   ; Check this health if it reaches the minimum then player 1 is the loser 
					je LOSER_CAT



					LOSER_DOG:  ; then player 1 is the winner
					mov ah,09
					mov dh,0
					mov dx, offset FIRST_PLAYER_NAME+2
					int 21h 
					jmp EndOfTheGame 

					LOSER_CAT:   ; then player 2 is the winner
					mov ah,09
					mov dh,0
					mov dx, offset SECOND_PLAYER_NAME+2
					int 21h 
					jmp EndOfTheGame 

					


			EndOfTheGame:

					; move the cursor to the end of the screen
					mov dl, 0; column. 
					mov dh, 19 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h 
					
					mov cx,40
					Print_ :
					mov ah,2 
					mov dl,'-'
					int 21h 
					loop print_ 

					; move the cursor to the end of the screen
					mov dl, 2 ; column. 
					mov dh,  21 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h

					; display final msg
					mov ah,09
					mov dh,0
					mov dx, offset FINALMSG_MENU
					int 21h 

					; move the cursor
					mov dl, 2 ; column. 
					mov dh,  23 ; row. 
					mov bx,0
					mov ah, 02h
					int 10h
					
					; display final msg
					mov ah,09
					mov dh,0
					mov dx, offset FINALMSG_ESC
					int 21h 

					FINAL_PRESS:
					mov ah,0
					int 16h
					cmp ah, 02
					jz return_to_main_menu 
					cmp ah, 01
					jz end_the_game
					jmp FINAL_PRESS

					return_to_main_menu: 
					MOV ISVALID , 1
					MOV start_hitting ,0
					MOV start_balling , 0
					call MAINMENU
					call STARTINGSCREEN

					end_the_game:
					mov ah,4ch
					int 21h
GAME_OVER Endp


END MAIN